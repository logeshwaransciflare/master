{"version":3,"sources":["views/Dashboard/SportsStats/contests1.js","configs/httpConfig.js","@core/components/widgets/stats/StatsVertical.js","views/Dashboard/store/action/index.js"],"names":["StatisticsCards","contestsLists","useSelector","state","dashboard","dispatch","useDispatch","useEffect","getContestsList","lg","xs","tag","className","icon","size","color","stats","today_contests","statTitle","this_week_contests","this_month_contests","token","localStorage","getItem","instance","axios","create","baseURL","headers","Authorization","interceptors","request","use","config","StatsVertical","getUserSignedUpCalendar","a","http","get","then","response","type","data","getUserSignedUpPlatforms","getLiveMatchesList"],"mappings":"uJAAA,iGAmHeA,UArDS,WAEtB,IACQC,EADMC,aAAY,SAACC,GAAD,OAAWA,EAAMC,aACnCH,cACFI,EAAWC,cAOjB,OALAC,qBAAU,WACRF,EAASG,iBAER,CAACH,IAGF,cAAC,WAAD,UACE,cAAC,IAAD,UACA,eAAC,IAAD,CAAMI,GAAG,IAAIC,GAAG,IAAhB,UACE,cAAC,IAAD,CAAWC,IAAI,KAAf,0BACA,eAAC,IAAD,CAAKC,UAAU,OAAf,UACG,cAAC,IAAD,CAAKH,GAAG,IAAIC,GAAG,IAAf,SACC,cAAC,IAAD,CACEG,KAAM,cAAC,IAAD,CAAcC,KAAM,KAC1BC,MAAM,UACNC,MAAOf,EAAcgB,eACrBC,UAAU,YAGd,cAAC,IAAD,CAAKT,GAAG,IAAIC,GAAG,IAAf,SACE,cAAC,IAAD,CACEG,KAAM,cAAC,IAAD,CAAcC,KAAM,KAC1BC,MAAM,SACNC,MAAOf,EAAckB,mBACrBD,UAAU,gBAGd,cAAC,IAAD,CAAKT,GAAG,IAAIC,GAAG,IAAf,SACE,cAAC,IAAD,CACEG,KAAM,cAAC,IAAD,CAAcC,KAAM,KAC1BC,MAAM,UACNC,MAAOf,EAAcmB,oBACrBF,UAAU,6B,6DClGlBG,EAAQC,aAAaC,QAAQ,SAC7BC,EAAWC,IAAMC,OAAO,CAC5BC,QAAS,+CACTC,QAAS,CACP,eAAgB,mBAChBC,cAAeR,KAGnBG,EAASM,aAAaC,QAAQC,KAAI,SAACC,GAEjC,IAAMZ,EAAQC,aAAaC,QAAQ,SACnC,OAAO,2BACFU,GADL,IAEEL,QAAS,CACP,eAAgB,mBAChBC,cAAc,GAAD,OACRR,SAKIG,O,iCCvBf,6BAsBeU,IAlBO,SAAC,GAAkD,IAAhDrB,EAA+C,EAA/CA,KAAME,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,MAAOE,EAA2B,EAA3BA,UAAWN,EAAgB,EAAhBA,UACtD,OACE,cAAC,IAAD,CAAMA,UAAU,yBAAhB,SACE,eAAC,IAAD,CAAUA,UAAWA,EAArB,UACE,qBACEA,UAAS,+BACPG,EAAK,mBAAeA,GAAU,oBAFlC,SAKE,qBAAKH,UAAU,iBAAf,SAAiCC,MAEnC,oBAAID,UAAU,qBAAd,SAAoCI,IACpC,mBAAGJ,UAAU,0BAAb,SAAwCM,W,iNCbnCiB,EAA0B,WACrC,8CAAO,WAAO9B,GAAP,SAAA+B,EAAA,sEACCC,IAAKC,IAAI,wCAAwCC,MAAK,SAACC,GAC3DnC,EAAS,CACPoC,KAAM,0BACNC,KAAMF,EAASE,KAAKA,UAJnB,2CAAP,uDAqBWC,EAA2B,WACtC,8CAAO,WAAOtC,GAAP,SAAA+B,EAAA,sEACCC,IAAKC,IAAI,qCAAqCC,MAAK,SAACC,GACxDnC,EAAS,CACPoC,KAAM,0BACNC,KAAMF,EAASE,KAAKA,UAJnB,2CAAP,uDAUWE,EAAqB,WAChC,8CAAO,WAAOvC,GAAP,SAAA+B,EAAA,sEACCC,IAAKC,IAAI,qCAAqCC,MAAK,SAACC,GACxDnC,EAAS,CACPoC,KAAM,wBACNC,KAAMF,EAASE,KAAKA,UAJnB,2CAAP,uDAUWlC,EAAkB,WAC7B,8CAAO,WAAOH,GAAP,SAAA+B,EAAA,sEACCC,IAAKC,IAAI,iCAAiCC,MAAK,SAACC,GACpDnC,EAAS,CACPoC,KAAM,oBACNC,KAAMF,EAASE,KAAKA,UAJnB,2CAAP","file":"static/js/216.4f73b36b.chunk.js","sourcesContent":["// import { Fragment, useEffect} from 'react'\n// //import Newsletter from \"./Newsletter\"\n// import { Row, Col } from 'reactstrap'\n// import { useDispatch } from 'react-redux'\n// // import Breadcrumbs from '@components/breadcrumbs'\n// // import LiveMatches from './livematches'\n// //import Traffic from './Traffic'\n// //import TableBasic from './TableBasic'\n// //import { ThemeColors } from '@src/utility/context/ThemeColors'\n// import Contests from './contests'\n// import { getContestsList } from '../store/action'\n// //import StatsCard from './StatsCards'\n\n// const StatisticsCards = () => {\n//   //const context = useContext(ThemeColors)\n\n//   const dispatch = useDispatch()\n\n//   useEffect(() => {\n//    dispatch(getContestsList())\n//   }, [dispatch])\n\n//   return (\n//     <Fragment>\n    \n//      <Row>\n//         {/* Stats Card */}\n//         <Col lg=\"8\" sm=\"12\">\n//           <Contests cols={{ md: '3', sm: '6' }} />\n//         </Col>\n//         {/* <Col lg=\"4\" sm=\"12\">\n//           <Newsletter warning={context.colors.warning.main} cols={{ md: '3', sm: '6' }} />\n//         </Col> */}\n\n//        {/* Stats Card */}\n//         {/* <Col lg=\"8\" sm=\"12\">\n//           <TableBasic cols={{ md: '3', sm: '6' }} />\n//         </Col> */}\n//       </Row>\n//       {/* Stats Card */}\n//       {/* Stats Card */}\n//     </Fragment>\n//   )\n// }\n\n// export default StatisticsCards\n\nimport { Fragment, useEffect} from 'react'\n//import Newsletter from \"./Newsletter\"\nimport { Row, Col, CardTitle } from 'reactstrap'\nimport { useDispatch, useSelector } from 'react-redux'\n//import Contests from './contests'\n// import Breadcrumbs from '@components/breadcrumbs'\n//import LiveMatches from './livematches'\nimport { TrendingDown, ArrowUpRight } from 'react-feather'\n//import Traffic from './Traffic'\n//import TableBasic from './TableBasic'\n//import { ThemeColors } from '@src/utility/context/ThemeColors'\n// import Contests from './contests'\nimport { getContestsList } from '../store/action'\n//import StatsCard from './StatsCards'\nimport StatsVertical from '@components/widgets/stats/StatsVertical'\nconst StatisticsCards = () => {\n  //const context = useContext(ThemeColors)\n  const store = useSelector((state) => state.dashboard)\n  const { contestsLists } = store\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(getContestsList())\n    \n  }, [dispatch])\n\n  return (\n    <Fragment>\n      <Row>\n      <Col  lg=\"4\" xs=\"6\" >\n        <CardTitle tag=\"h4\">Live Matches</CardTitle>\n        <Row className=\"mt-0\"> \n           <Col lg=\"4\" xs=\"6\">\n            <StatsVertical\n              icon={<ArrowUpRight size={21} />}\n              color=\"success\"\n              stats={contestsLists.today_contests}\n              statTitle=\"Today\"\n            />\n          </Col>\n          <Col lg=\"4\" xs=\"6\">\n            <StatsVertical\n              icon={<TrendingDown size={21} />}\n              color=\"danger\"\n              stats={contestsLists.this_week_contests}\n              statTitle=\"This Week\"\n            />\n          </Col>\n          <Col lg=\"4\" xs=\"6\">\n            <StatsVertical\n              icon={<ArrowUpRight size={21} />}\n              color=\"primary\"\n              stats={contestsLists.this_month_contests}\n              statTitle=\"This Month\"\n            />\n          </Col>\n           </Row>\n        </Col>\n        {/* <Col lg=\"8\" sm=\"12\">\n          <Contests cols={{ md: '3', sm: '6' }} />\n        </Col> */}\n        \n      </Row>\n    \n    </Fragment>\n  )\n}\n\nexport default StatisticsCards","import axios from 'axios'\n//import { Redirect } from 'react-router-dom'\nconst token = localStorage.getItem('TOKEN')\nconst instance = axios.create({\n  baseURL: 'https://fantasyapi.sciflaredev.com/admin/api',\n  headers: {\n    'Content-type': 'application/json',\n    Authorization: token\n  }\n})\ninstance.interceptors.request.use((config) => {\n  //const token = \"Bearer uchhE4e7lVxyFD68NdBxcylhSX108K5KkkGDLxWHluyMTYHd0CEWt9Th5c9OZ3XWlKO0hqtmQaTEYOgN4iXNfwZH7we462od18qD\"\n  const token = localStorage.getItem('TOKEN')\n  return {\n    ...config,\n    headers: {\n      'Content-type': 'application/json',\n      Authorization:\n        `${token}`\n    }\n  }\n})\n\nexport default instance ","// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport { Card, CardBody } from 'reactstrap'\r\n\r\nconst StatsVertical = ({ icon, color, stats, statTitle, className }) => {\r\n  return (\r\n    <Card className=\"text-center card h-100\">\r\n      <CardBody className={className}>\r\n        <div\r\n          className={`avatar p-50 m-0 mb-1 ${\r\n            color ? `bg-light-${color}` : 'bg-light-primary'\r\n          }`}\r\n        >\r\n          <div className=\"avatar-content\">{icon}</div>\r\n        </div>\r\n        <h2 className=\"font-weight-bolder\">{stats}</h2>\r\n        <p className=\"card-text line-ellipsis\">{statTitle}</p>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default StatsVertical\r\n\r\n// ** PropTypes\r\nStatsVertical.propTypes = {\r\n  icon: PropTypes.element.isRequired,\r\n  color: PropTypes.string.isRequired,\r\n  statTitle: PropTypes.string.isRequired,\r\n  className: PropTypes.string\r\n}\r\n","import http from '../../../../configs/httpConfig'\r\n\r\n/** Get user signup count by calender */\r\nexport const getUserSignedUpCalendar = () => {\r\n  return async (dispatch) => {\r\n    await http.get('/admin_dashboad/user_signed_up_count').then((response) => {\r\n      dispatch({\r\n        type: 'GET_USER_COUNT_CALENDAR',\r\n        data: response.data.data\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport const getChallengesList = () => {\r\n  return async (dispatch) => {\r\n    await http.get('/admin_dashboad/Challenges_list').then((response) => {\r\n      dispatch({\r\n        type: 'GET_Challenges_LIST',\r\n        data: response.data.data\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport const getUserSignedUpPlatforms = () => {\r\n  return async (dispatch) => {\r\n    await http.get('/admin_dashboad/user_signup_count').then((response) => {\r\n      dispatch({\r\n        type: 'GET_USER_COUNT_PLATFORM',\r\n        data: response.data.data\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport const getLiveMatchesList = () => {\r\n  return async (dispatch) => {\r\n    await http.get('/admin_dashboad/live_matches_list').then((response) => {\r\n      dispatch({\r\n        type: 'GET_LIVE_MATCHES_LIST',\r\n        data: response.data.data\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport const getContestsList = () => {\r\n  return async (dispatch) => {\r\n    await http.get('/admin_dashboad/contests_list').then((response) => {\r\n      dispatch({\r\n        type: 'GET_CONTESTS_LIST',\r\n        data: response.data.data\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport const getDate = (from, to) => {\r\n  return async (dispatch) => {\r\n    await http.get(`/admin_dashboad/picker?from=${from} to=${to}`).then((response) => {\r\n      dispatch({\r\n        type: 'PICK_DATE',\r\n        data: response.data.data\r\n      })\r\n    })\r\n  }\r\n}\r\n"],"sourceRoot":""}