{"version":3,"sources":["views/WallPost/add/post/index.js","views/WallPost/add/index.js","configs/httpConfig.js","views/Toast.js","@core/components/breadcrumbs/index.js","@core/components/ui-loader/index.js","views/WallPost/store/action/index.js"],"names":["AddPost","useForm","handleSubmit","reset","dispatch","useDispatch","store","useSelector","state","feeds","useState","imageUpload","setImageUpload","imageError","setImageError","content","setContent","value","label","currentCategory","setCurrentCategory","EditorState","createEmpty","editorState","setEditorState","useEffect","convertedContent","setConvertedContent","createMarkup","html","__html","DOMPurify","sanitize","editor","setEditor","converted","setConverted","addPostReset","addSuccessData","console","log","setTimeout","uppy","Uppy","meta","type","autoProceed","restrictions","maxNumberOfFiles","allowedFileTypes","on","file","reader","FileReader","readAsDataURL","data","onloadend","base64data","result","dangerouslySetInnerHTML","feedtext","length","dangerouslySet","feedtex","formSubmit","val","params","feed_type","feed_content","feed_image","arabic_feed_content","post_content","notifyWarning","addFeedPost","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Card","CardHeader","CardTitle","tag","CardBody","Row","className","Col","Form","onSubmit","e","preventDefault","addPostLoader","FormGroup","Label","for","isClearable","theme","selectThemeColors","classNamePrefix","options","onChange","onEditorStateChange","currentContentAsHTML","convertToHTML","getCurrentContent","convertContentToHTML","wrapperClassName","editorClassName","toolbarClassName","convertC","locale","strings","dropHereOr","browse","src","Button","Ripple","color","disabled","blocking","WallPostAdd","token","localStorage","getItem","instance","axios","create","baseURL","headers","Authorization","interceptors","request","use","config","Successlogin","message","size","icon","Successadd","Successedit","Successdelete","ErrorToast","WarningToast","role","notifySuccesslogin","toast","success","hideProgressBar","notifySuccessadd","notifySuccessedit","notifySuccessdelete","notifyError","error","warning","BreadCrumbs","props","breadCrumbParent2","breadCrumbParent3","to","active","UILoader","children","loader","overlayColor","Tag","classnames","style","backgroundColor","defaultProps","getAllWallData","page","http","get","then","response","catch","deleteFeedPost","id","delete","post","editPostData","editFeedPost","put","Feedtogglestatus"],"mappings":"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","file":"static/js/87.3811cdd3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useForm } from 'react-hook-form'\nimport {  useSelector, useDispatch } from 'react-redux'\nimport { Card, CardHeader, CardTitle, CardBody, Row, Col, Button, FormGroup, Form, Label } from 'reactstrap'\nimport Uppy from '@uppy/core'\n//import {EditorState} from \"draft-js\"\nimport { DragDrop } from '@uppy/react'\nimport UiLoader from '@components/ui-loader'\nimport Select from 'react-select'\nimport { selectThemeColors } from '@utils'\n//import { Editor } from 'react-draft-wysiwyg'\nimport { EditorState } from 'draft-js'\nimport { Editor } from 'react-draft-wysiwyg'\nimport { convertToHTML } from 'draft-convert'\nimport DOMPurify from 'dompurify'\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\n//import htmlToDraft from 'html-to-draftjs'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/react/libs/editor/editor.scss'\n//import { EditorState, ContentState } from 'draft-js'\nimport { addFeedPost, addPostReset } from '../../store/action'\nimport { notifyWarning } from '../../../Toast'\nimport Breadcrumbs from '@components/breadcrumbs'\nimport './styles.scss'\n\nconst AddPost = () => {\n \n  const { handleSubmit, reset } = useForm()\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.feeds)\n\n  // const contentBlock = htmlToDraft(initialContent)\n  // const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks)\n  // const editorState = EditorState.createWithContent(contentState)\n  //const [editorState, setEditorState] = useState(EditorState.createEmpty())\n  const [imageUpload, setImageUpload] = useState('')\n  const [imageError, setImageError] = useState(false)\n  const [content, setContent] = useState(\"\")\n//  const onEditorStateChange = editorState => {\n//   setEditorState(editorState)\n//   console.log(editorState)\n// }\n  //console.log(editorState)\n  const categoryOptions = [\n    { value: '', label: 'Select Category' },\n    { value: 'Post', label: 'Post' },\n    { value: 'Announcement', label: 'Announcement' },\n    { value: 'Offers', label: 'Offers' },\n    { value: 'Stats', label: 'Stats' },\n    { value: 'Merchandise', label: 'Merchandise' },\n    { value: 'Countdown', label: 'Countdown' },\n    { value: 'Polls', label: 'Polls' },\n    { value: 'Winner Announcement', label: 'Winner Announcement' }\n  ]\n\n  // const langOptions = [\n  //   { value: '1', label: 'English' },\n  //   { value: '2', label: 'Arabic' }\n  // ]\n\n  const [currentCategory, setCurrentCategory] = useState({\n    value: '',\n    label: 'Select Category'\n  })\n  // const [currentlang, setCurrentLang] = useState()\n  const handleCurrentCategory = (val) => {\n    setCurrentCategory(val)\n  }\n  // const handleCurrentlang = (val) => {\n  // setCurrentLang(val)\n  // }\n \n  const [editorState, setEditorState] = useState(\n    () => EditorState.createEmpty('')\n  )\n  useEffect(() => {}, [editorState])\n  const  [convertedContent, setConvertedContent] = useState(null)\n  const convertContentToHTML = (editorState) => {\n    const currentContentAsHTML = convertToHTML(editorState.getCurrentContent())\n    setConvertedContent(currentContentAsHTML)\n}\n  \n  const handleEditorChange = (state) => {\n    setEditorState(state)\n    convertContentToHTML(state)\n  }\n\n  const createMarkup = (html) => {\n    return  {\n      __html: DOMPurify.sanitize(html)\n    }\n    \n  }\n\n\n  const [editor, setEditor] = useState(\n    () => EditorState.createEmpty()\n  )\n  useEffect(() => {}, [editor])\n  const  [converted, setConverted] = useState(null)\n  // const convertC = () => {\n  //   const currentContentAsHTML = convertToHTML(editor.getCurrentContent())\n  //   setConverted(currentContentAsHTML)\n  // }\n  const convertC = (editor) => {\n    const currentContentAsHTML = convertToHTML(editor.getCurrentContent())\n    setConverted(currentContentAsHTML)\n}\n  \n  const handleEditor = (state) => {\n    setEditor(state)\n    convertC(state)\n  }\n useEffect(() => () => {\n    dispatch(addPostReset())\n  }, [])\n  \n  useEffect(() => {    \n    if (store.addSuccessData) {\n      reset()\n      setContent({editor:content?.editor})\n      console.log(content)\n      setImageUpload('')\n      setEditorState('')\n      setTimeout(() => {\n        dispatch(addPostReset())\n      }, 3000)\n    }\n  }, [store.addSuccessData])\n  \n  const uppy = new Uppy({\n    meta: { type: 'avatar' },\n    autoProceed: true,\n    restrictions: { maxNumberOfFiles: 1, allowedFileTypes: ['image/*'] }\n  })\n  uppy.on(\"file-added\", function (file) {\n    const reader = new FileReader()\n    reader.readAsDataURL(file.data)\n    reader.onloadend = function () {\n      const base64data = reader.result\n      setImageUpload(base64data)\n    }\n  })\n  const dangerouslySetInnerHTML = createMarkup(convertedContent).__html\n  const feedtext = (dangerouslySetInnerHTML.length < 20 ? null : dangerouslySetInnerHTML)\n\n  const dangerouslySet = createMarkup(converted).__html\n  const feedtex = (dangerouslySet.length < 20 ? null : dangerouslySet)\n  \n  const formSubmit = (val) => {\n    if (imageUpload) {\n      console.log(val)\n     \n      const params = {\n        feed_type: \"Post\",\n        feed_content: feedtext,\n        feed_image: imageUpload,\n        // feed_lang: currentlang.value,\n        arabic_feed_content: feedtex\n      }\n      console.log(val.post_content)\n      console.log(imageUpload)\n      console.log(params.feed_image)\n      \n      if ((params.feed_content === null || params.feed_image === '')) {\n        notifyWarning()\n      } else {\n        dispatch(addFeedPost(params))\n      }\n      setConvertedContent('')\n    }\n  }\n\n  const formHandler = (e) => {\n    e.preventDefault()\n\n    if (store.addPostLoader) {\n      return\n    }\n\n    if (!imageUpload) {\n      setImageError(true)\n    } else {\n      setImageError(false)\n    }\n\n    handleSubmit(formSubmit)()\n  }\n  \n  return (\n  <>\n          <Breadcrumbs breadCrumbTitle='Walls' breadCrumbParent='Walls' breadCrumbActive='Add' />\n    <Card>\n      <CardHeader>\n        <CardTitle tag=\"h4\">Add Post</CardTitle>\n      </CardHeader>\n      <CardBody>\n    \n          {/* <Col className='mb-1' md='6' sm='12'>\n            <Label>Wall language</Label>\n            <Select\n              theme={selectThemeColors}\n              className='react-select'\n              classNamePrefix='select'\n              value={currentlang}\n              onChange={(data) => {\n                handleCurrentlang(data)\n              }}\n              name='clear'\n              options={langOptions}\n              isClearable\n            /> \n          </Col> */}\n        \n        <Row className=\"wrapper-add-post\">\n          <Col className=\"add-post-edit\">\n            <Form onSubmit={formHandler}>\n              <div className=\"form-label-group add-feed-textarea\">\n                <FormGroup>\n                  <Label for=\"nameVertical\">Feed Type</Label>\n                  <Select\n                    isClearable={false}\n                    theme={selectThemeColors}\n                    className=\"react-select\"\n                    classNamePrefix=\"select\"\n                    options={categoryOptions}\n                    value={currentCategory}\n                    onChange={(data) => {\n                      handleCurrentCategory(data)\n                    }}\n                  />\n                  <br/>\n                  <Label className=\"form-label\" for=\"post_content\">\n                   <h3>Post Content English</h3> \n                  </Label>\n                 \n                    <Editor \n                        editorState={editorState}\n                        onEditorStateChange={handleEditorChange}\n                        wrapperClassName=\"wrapper-class\"\n                        editorClassName=\"editor-class\"\n                        toolbarClassName=\"toolbar-class\"\n                        // wrapperStyle={{ width: 800, border: \"1px solid black\" }}\n                   />\n                   <br/>\n                   <Label className=\"form-label\" for=\"post_content\">\n                    <h3>Post Content Arabic</h3>\n                  </Label>\n                 \n                    <Editor \n                        editorState={editor}\n                        onEditorStateChange={handleEditor}\n                        wrapperClassName=\"wrapper-class\"\n                        editorClassName=\"editor-class\"\n                        toolbarClassName=\"toolbar-class\"\n                      // wrapperStyle={{ width: 800, border: \"1px solid black\" }}\n                   />\n                 \n                </FormGroup>\n              </div>\n              <div className={`mt-4 ${imageError ? 'img-error-post' : ''}`}>\n                <DragDrop\n                  uppy={uppy}\n                  locale={{\n                    strings: {\n                      // Text to show on the droppable area.\n                      // `%{browse}` is replaced with a link that opens the system file selection dialog.\n                      dropHereOr: 'Drop Image or %{browse}',\n                      // Used as the label for the link that opens the system file selection dialog.\n                      browse: 'browse'\n                    }\n                  }}\n                />\n                {imageUpload && (\n                  <div className=\"uploaded-files\">\n                    <img src={imageUpload} className=\"post-preview\" />\n                  </div>\n                )}\n              </div>\n              <FormGroup className=\"mt-3\">\n                <div className=\"d-flex justify-content-start\">\n                  <Button.Ripple\n                    type=\"submit\"\n                    color=\"primary\"\n                    disabled={store.addPostLoader}\n                    className=\"btn-next\"\n                  >\n                    <span className=\"align-middle d-sm-inline-block d-none\">\n                      Add Post\n                    </span>\n                  </Button.Ripple>\n                  {store.addPostLoader && (\n                    <div className=\"ml-2 mt-2\">\n                      <UiLoader blocking />\n                    </div>\n                  )}\n                  {store.addSuccessData && (\n                    <p className=\"ml-2 pt-1 mb-0 success-msg\">\n                      Post Added Successfull\n                    </p>\n                  )}\n                </div>\n              </FormGroup>\n            </Form>\n          </Col>\n        </Row>\n      </CardBody>\n    </Card>\n    </>\n  )\n}\n\nexport default AddPost","import React, { Fragment } from 'react'\r\n// import Poll from './poll'\r\nimport Post from './post'\r\nimport '@uppy/core/dist/style.css'\r\nimport '@styles/react/libs/file-uploader/file-uploader.scss'\r\nimport './styles.scss'\r\n\r\nconst WallPostAdd = () => {\r\n  return (\r\n    <Fragment>      \r\n      <Post />\r\n      {/* <Poll />  */}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default WallPostAdd\r\n","import axios from 'axios'\n//import { Redirect } from 'react-router-dom'\nconst token = localStorage.getItem('TOKEN')\nconst instance = axios.create({\n  baseURL: 'https://fantasyapi.sciflaredev.com/admin/api',\n  headers: {\n    'Content-type': 'application/json',\n    Authorization: token\n  }\n})\ninstance.interceptors.request.use((config) => {\n  //const token = \"Bearer uchhE4e7lVxyFD68NdBxcylhSX108K5KkkGDLxWHluyMTYHd0CEWt9Th5c9OZ3XWlKO0hqtmQaTEYOgN4iXNfwZH7we462od18qD\"\n  const token = localStorage.getItem('TOKEN')\n  return {\n    ...config,\n    headers: {\n      'Content-type': 'application/json',\n      Authorization:\n        `${token}`\n    }\n  }\n})\n\nexport default instance ","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport { Bell, Check, X, AlertTriangle, Info } from 'react-feather'\nimport { Card, CardHeader, CardBody, CardTitle, Button } from 'reactstrap'\n\nconst PrimaryToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='primary' icon={<Bell size={12} />} />\n        <h6 className='toast-title'>Default!</h6>\n      </div>\n      <small className='text-muted'>12 Min Ago</small>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n      </span>\n    </div>\n  </Fragment>\n)\n\nconst Successlogin = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\n // const SuccessToast = () => (\n  //   <Fragment>\n  //     <div className='toastify-header'>\n  //       <div className='title-wrapper'>\n  //         <Avatar size='sm' color='success' icon={<Check size={12} />} />\n  //         <h6 className='toast-title'>Success!</h6>\n  //       </div>\n  //       <small className='text-muted'>11 Min Ago</small>\n  //     </div>\n  //     <div className='toastify-body'>\n  //       <span role='img' aria-label='toast-text'>\n  //         Successfully loged in\n  //       </span>\n  //     </div>\n  //   </Fragment>\n  // )\n\n\nconst Successadd = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst Successedit = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst Successdelete = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      {/* <span role='img' aria-label='toast-text'>\n        👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n      </span> */}\n    </div>\n  </Fragment>\n)\n\nconst ErrorToast = ({message}) => (\n  <Fragment>\n  <div className='toastify-header'>\n    <div className='title-wrapper'>\n      <Avatar size='sm' color='danger' icon={<X size={12} />} />\n      <h6 className='toast-title'>{message}</h6>\n    </div>\n  </div>\n  <div className='toastify-body'>\n    {/* <span role='img' aria-label='toast-text'>\n      👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n    </span> */}\n  </div>\n</Fragment>\n)\n\nconst WarningToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>Warning!</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        👋 Text Content Empty\n      </span>\n    </div>\n  </Fragment>\n)\n\nconst InfoToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>Info!</h6>\n      </div>\n      <small className='text-muted'>11 Min Ago</small>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n      </span>\n    </div>\n  </Fragment>\n)\n\nconst SuccessProgressToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Progress Bar!</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n       \n      </span>\n    </div>\n  </Fragment>\n)\n\nexport const notifySuccesslogin = (message) => toast.success(<Successlogin message={message} />, { hideProgressBar: true })\nexport const notifySuccessadd = (message) => toast.success(<Successadd message={message} />, { hideProgressBar: true })\nexport const notifySuccessedit = (message) => toast.success(<Successedit message={message} />, { hideProgressBar: true })\nexport const notifySuccessdelete = (message) => toast.success(<Successdelete message={message} />, { hideProgressBar: true })\nexport const notifyError = (message) => toast.error(<ErrorToast message={message}/>, { hideProgressBar: true })\nexport const notifyWarning = () => toast.warning(<WarningToast />, { hideProgressBar: true })\nexport const ToastTypes = () => {\n  const notifyDefault = () => toast(<PrimaryToast />, { hideProgressBar: true })\n  const notifyInfo = () => toast.info(<InfoToast />, { hideProgressBar: true })\n  const notifySuccessProgress = () => toast.success(<SuccessProgressToast />)\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'>Types</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <div className='demo-inline-spacing'>\n          <Button.Ripple color='primary' onClick={notifyDefault} outline>\n            Default\n          </Button.Ripple>\n          <Button.Ripple color='danger' onClick={notifyError} outline>\n            Error\n          </Button.Ripple>\n          <Button.Ripple color='warning' onClick={notifyWarning} outline>\n            Warning\n          </Button.Ripple>\n          <Button.Ripple color='info' onClick={notifyInfo} outline>\n            Info\n          </Button.Ripple>\n          <Button.Ripple color='success' onClick={notifySuccessProgress} outline>\n            Success Progress Bar\n          </Button.Ripple>\n        </div>\n      </CardBody>\n    </Card>\n  )\n}\n","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\n//import { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem\r\n  //UncontrolledButtonDropdown,\r\n  //DropdownMenu,\r\n  //DropdownItem,\r\n  //DropdownToggle\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent ? (\r\n                <BreadcrumbItem tag='li' className='text-primary'>\r\n                  <Link to={`/${breadCrumbParent}`}>{breadCrumbParent}</Link>\r\n                </BreadcrumbItem>\r\n                ) : ''\r\n                }\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>\r\n        <div className='form-group breadcrum-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' right>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <CheckSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Todo</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <MessageSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Chat</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/email'>\r\n                <Mail className='mr-1' size={14} />\r\n                <span className='align-middle'>Email</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/calendar'>\r\n                <Calendar className='mr-1' size={14} />\r\n                <span className='align-middle'>Calendar</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string.isRequired\r\n}\r\n","// ** Third Party Components\r\nimport { Fragment } from 'react'\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Spinner } from 'reactstrap'\r\n\r\nimport './ui-loader.scss'\r\n\r\nconst UILoader = props => {\r\n  const { children, blocking, loader, className, tag, overlayColor } = props\r\n\r\n  const Tag = tag\r\n\r\n  return (\r\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\r\n      {children}\r\n      {blocking ? (\r\n        <Fragment>\r\n          <div\r\n            className='overlay' /*eslint-disable */\r\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\r\n            /*eslint-enable */\r\n          ></div>\r\n          <div className='loader'>{loader}</div>\r\n        </Fragment>\r\n      ) : null}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default UILoader\r\n\r\nUILoader.defaultProps = {\r\n  tag: 'div',\r\n  blocking: false,\r\n  loader: <Spinner color='primary' />\r\n}\r\n\r\nUILoader.propTypes = {\r\n  tag: Proptypes.string,\r\n  loader: Proptypes.any,\r\n  className: Proptypes.string,\r\n  overlayColor: Proptypes.string,\r\n  blocking: Proptypes.bool.isRequired\r\n}\r\n","import http from '../../../../configs/httpConfig'\nimport {notifyError, notifySuccessadd, notifySuccessedit} from \"../../../Toast\"\n\n//Get all Data Init\nexport const getAllWallDataInit = () => ({\n  type: 'GET_ALL_WALL_DATA_INIT'\n})\n\n// Get all Data Fail\nexport const getAllWallDataFail = () => ({\n  type: 'GET_ALL_WALL_DATA_FAIL'\n})\n//const url = (from && to) ? `/reports/referralReport?from=${from}&to=${to}&page=${page}` : `/reports/referralReport?page=${page}`\n// ** Get all Data\nexport const getAllWallData = (page) => {\n  \n  return async (dispatch) => {\n    dispatch(getAllWallDataInit())\n    await http.get(`/feeds/list?page=${page}`).then((response) => {\n      console.log(response)\n      dispatch({\n        type: 'GET_ALL_WALL_POST',\n        data: response.data.data\n      })\n    }).catch(() => {\n     // console.log(e)\n      dispatch(getAllWallDataFail())\n    })\n  } \n}\n\nexport const Delete = () => {\n  return (dispatch) => {\n    dispatch({\n      type:'WALL_DELETE'\n    })\n  } \n}\n\nexport const deleteFeedPost = (id) => {\n  return async (dispatch) => {\n    await http.delete(`/feeds/delete/${id}`).then(() => {\n      notifyError('successfully deleted')\n      dispatch(getAllWallData())      \n    }).catch((e) => {     \n      notifyError('error')\n      dispatch(Delete())\n      console.log(e)\n    })\n  }\n}\n\nexport const UserFeed = (id) => {  \n  return async (dispatch) => {\n    dispatch(getAllWallDataInit())\n    await http.get(`/feeds/comment?user=${id}`).then((response) => {\n      console.log(response)\n      dispatch({\n        type: 'GET_ALL_WALL_COMMENNT',\n        data: response.data.data\n      })\n    }).catch(() => {\n      dispatch(getAllWallDataFail())\n    })\n  } \n}\n\nexport const addPostInit = () => ({\n  type: 'ADD_FEED_POST_INIT'\n})\n\nexport const addPostFail = () => ({\n  type: 'ADD_FEED_POST_FAIL'\n})\n\nexport const addFeedPost = (params) => {\n \n  return async (dispatch) => {\n    dispatch(addPostInit())\n   if (params.feed_content === null) {\n  \n    notifyError(\"Eror\")\n   } else {\n    await http.post('/feeds/add', params).then((response) => {\n      notifySuccessadd(response.data.message)\n      dispatch({\n        type: 'ADD_FEED_POST',\n        data: response.data.message\n      })\n      \n    }).catch((e) => {\n      \n      notifyError(e.response.data.message)\n      console.log(\"Error in Feed Post: \", e)\n      dispatch(addPostFail())\n    })\n  }\n}\n   }\n    \n\nexport const addPostReset = () => ({\n  type: 'RESET_ADD_POST'\n})\n\n\nexport const editPostReset = () => ({\n  type: 'RESET_EDIT_POST'\n})\n\nexport const editPostData = (params) => ({\n  type: 'EDIT_POST_DATA',\n  data: params\n})\n\nexport const editPostInit = () => ({\n  type: 'EDIT_POST_INIT'\n})\n\nexport const editPostFail = () => ({\n  type: 'EDIT_POST_FAIL'\n})\n\n\nexport const editFeedPost = (id, params) => {\n  return async (dispatch) => {\n    dispatch(editPostInit())\n    await http.put(`/feeds/edit/${id}`, params).then((response) => {\n      console.log(response)\n      notifySuccessedit(response.data.message)\n      //console.log(response.data.message)\n      console.log(\"Respont : \", response)\n      dispatch({\n        type: 'EDIT_FEED_POST',\n        data: response.data.message\n      })\n    }).catch((e) => {\n      console.log(e)\n      notifyError(e.data.message)\n      console.log(\"Error in Feed Post: \", e)\n      dispatch(editPostFail())\n    })\n  }\n}\n\nexport const wallview = (id) => {\n  return async (dispatch) => {\n    await http.put(`/feeds/view/${id}`).then((response) => {\n      console.log(\"Respont : \", response)\n      dispatch({\n        type: 'GET_WALL_VIEW',\n        data: response.data.message\n      })\n    }).catch((e) => {\n      console.log(\"Error in Feed Post: \", e)\n      dispatch(editPostFail())\n    })\n  }\n}\nexport const Feedtogglestatus = (id) => {\n  return async (dispatch) => {    \n    await http.post(`feeds/toggle_status/${id}`).then((response) => {\n      notifySuccessadd('successfully updated')      \n     console.log(response)\n       dispatch({\n        type: 'FEED_TOGGLE_STATUS',\n        data: response\n      })  \n       dispatch(getAllWallData())        \n    }).catch((e) => {\n      notifyError('error')\n      console.log(e)\n      console.log(\"Error in Feed Post: \", e)\n      \n    })\n  }\n}"],"sourceRoot":""}