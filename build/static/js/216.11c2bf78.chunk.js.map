{"version":3,"sources":["views/setting/Tab.js","views/setting/Generaltab.js","@core/components/input-password-toggle/index.js","views/setting/Password.js","views/setting/index.js"],"names":["Tabs","activeTab","toggleTab","Nav","className","pills","vertical","NavItem","NavLink","active","onClick","size","GeneralTabs","data","useForm","register","errors","handleSubmit","control","setValue","trigger","useState","avatar","setAvatar","dropdownOpen","setDropdownOpen","Row","Col","sm","Media","left","object","src","alt","height","width","body","Button","Ripple","tag","Label","color","Input","type","onChange","e","reader","FileReader","files","target","onload","result","readAsDataURL","hidden","accept","outline","ButtonDropdown","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","href","countryCode","svg","Form","onSubmit","FormGroup","for","defaultValue","username","as","id","name","placeholder","innerRef","required","value","classnames","fullName","email","Alert","preventDefault","InputPasswordToggle","props","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","InputGroup","InputGroupAddon","addonType","InputGroupText","renderIcon","defaultProps","PasswordTabContent","SignupSchema","yup","shape","oneOf","resolver","yupResolver","AccountSettings","setActiveTab","setData","console","log","useEffect","axios","get","then","response","md","Tab","tab","Card","CardBody","TabContent","TabPane","tabId","general","Password"],"mappings":"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","file":"static/js/216.11c2bf78.chunk.js","sourcesContent":["import { Nav, NavItem, NavLink } from 'reactstrap'\nimport { User, Lock } from 'react-feather'\n\nconst Tabs = ({ activeTab, toggleTab }) => {\n  return (\n    <Nav className='nav-left' pills vertical>\n      <NavItem>\n        <NavLink active={activeTab === '1'} onClick={() => toggleTab('1')}>\n          <User size={18} className='mr-1' />\n          <span className='font-weight-bold'>General</span>\n        </NavLink>\n      </NavItem>\n      <NavItem>\n        <NavLink active={activeTab === '2'} onClick={() => toggleTab('2')}>\n          <Lock size={18} className='mr-1' />\n          <span className='font-weight-bold'>Change Password</span>\n        </NavLink>\n      </NavItem>\n    </Nav>\n  )\n}\n\nexport default Tabs\n","import { Fragment, useState } from 'react'\nimport classnames from 'classnames'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Button, Media, Label, Row, Col, Input, FormGroup, Alert, Form, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport ReactCountryFlag from 'react-country-flag'\nconst GeneralTabs = ({ data }) => {\n  const { register, errors, handleSubmit, control, setValue, trigger } = useForm()\n\n  const [avatar, setAvatar] = useState(data.avatar ? data.avatar : '')\n\n  const onChange = e => {\n    const reader = new FileReader(),\n      files = e.target.files\n    reader.onload = function () {\n      setAvatar(reader.result)\n    }\n    reader.readAsDataURL(files[0])\n  }\n  const [dropdownOpen, setDropdownOpen] = useState(false)\n  const onSubmit = () => trigger()\n  const toggleDropdown = () => {\n    setDropdownOpen(!dropdownOpen)\n  }\n  return (\n    <Fragment>\n      <Row>\n        <Col sm='6'>\n        <Media>\n        <Media className='mr-25' left>\n          <Media object className='rounded mr-50' src={avatar} alt='Generic placeholder image' height='80' width='80' />\n        </Media>\n        <Media className='mt-75 ml-1' body>\n          <Button.Ripple tag={Label} className='mr-75' size='sm' color='primary'>\n            Upload\n            <Input type='file' onChange={onChange} hidden accept='image/*' />\n          </Button.Ripple>\n          <Button.Ripple color='secondary' size='sm' outline>\n            Reset\n          </Button.Ripple>\n          <p>Allowed JPG, GIF or PNG. Max size of 800kB</p>\n        </Media>\n      </Media>\n        </Col>\n     <Col sm='6'>\n     <ButtonDropdown isOpen={dropdownOpen} toggle={toggleDropdown}>\n      <DropdownToggle color='primary' caret>\n       TimeZone\n      </DropdownToggle>\n      <DropdownMenu>\n        <DropdownItem href='/' tag='a'>\n        <ReactCountryFlag className='country-flag' countryCode='in' svg />\n          <span className='ml-1'>English</span>\n        </DropdownItem>\n       \n        <DropdownItem href='/' tag='a'>\n        <ReactCountryFlag className='country-flag' countryCode='ae' svg />\n          <span className='ml-1'>Arabic</span>\n        </DropdownItem>\n      </DropdownMenu>\n    </ButtonDropdown>\n     </Col>\n      \n      </Row>\n    \n      \n      <Form className='mt-2' onSubmit={handleSubmit(onSubmit)}>\n        <Row>\n          <Col sm='6'>\n            <FormGroup>\n              <Label for='username'>Username</Label>\n              <Controller\n                defaultValue={data.username}\n                control={control}\n                as={Input}\n                id='username'\n                name='username'\n                placeholder='Username'\n                innerRef={register({ required: true })}\n                onChange={e => setValue('username', e.target.value)}\n                className={classnames({\n                  'is-invalid': errors.username\n                })}\n              />\n            </FormGroup>\n          </Col>\n          <Col sm='6'>\n            <FormGroup>\n              <Label for='name'>Name</Label>\n              <Controller\n                defaultValue={data.fullName}\n                control={control}\n                as={Input}\n                id='name'\n                name='fullName'\n                placeholder='Name'\n                innerRef={register({ required: true })}\n                onChange={e => setValue('fullName', e.target.value)}\n                className={classnames({\n                  'is-invalid': errors.fullName\n                })}\n              />\n            </FormGroup>\n          </Col>\n          <Col sm='6'>\n            <FormGroup>\n              <Label for='email'>E-mail</Label>\n              <Controller\n                defaultValue={data.email}\n                control={control}\n                as={Input}\n                type='email'\n                id='email'\n                name='email'\n                placeholder='Email'\n                innerRef={register({ required: true })}\n                onChange={e => setValue('email', e.target.value)}\n                className={classnames({\n                  'is-invalid': errors.email\n                })}\n              />\n            </FormGroup>\n          </Col>\n          <Col className='mt-75' sm='12'>\n            <Alert className='mb-50' color='warning'>\n              <h4 className='alert-heading'>Your email is not confirmed. Please check your inbox.</h4>\n              <div className='alert-body'>\n                <a href='/' className='alert-link' onClick={e => e.preventDefault()}>\n                  Resend confirmation\n                </a>\n              </div>\n            </Alert>\n          </Col>\n          <Col className='mt-2' sm='12'>\n            <Button.Ripple type='submit' className='mr-1' color='primary'>\n              Save changes\n            </Button.Ripple>\n            <Button.Ripple color='secondary' outline>\n              Cancel\n            </Button.Ripple>\n          </Col>\n        </Row>\n      </Form>\n    </Fragment>\n  )\n}\n\nexport default GeneralTabs\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport {\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Input,\r\n  InputGroupText,\r\n  Label\r\n} from 'reactstrap'\r\n\r\nconst InputPasswordToggle = (props) => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon\r\n          addonType=\"append\"\r\n          onClick={() => setInputVisibility(!inputVisibility)}\r\n        >\r\n          <InputGroupText className=\"cursor-pointer\">\r\n            {renderIcon()}\r\n          </InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n","import * as yup from 'yup'\nimport classnames from 'classnames'\nimport { useForm } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport { Form, FormGroup, Row, Col, Button } from 'reactstrap'\nimport InputPasswordToggle from '@components/input-password-toggle'\n\nconst PasswordTabContent = () => {\n  const SignupSchema = yup.object().shape({\n    'old-password': yup.string().required(),\n    'new-password': yup.string().required(), \n    'retype-new-password': yup\n      .string()\n      .required()\n      .oneOf([yup.ref(`new-password`), null], 'Passwords must match')\n  })\n\n  const { register, errors, handleSubmit, trigger } = useForm({\n    resolver: yupResolver(SignupSchema)\n  })\n\n  const onSubmit = () => trigger()\n\n  return (\n    <Form  onSubmit={handleSubmit(onSubmit)}>\n      <Row>\n        <Col sm='6'>\n          <FormGroup>\n            <InputPasswordToggle\n              label='Old Password'\n              htmlFor='old-password'\n              name='old-password'\n              innerRef={register({ required: true })}\n              className={classnames('input-group-merge', {\n                'is-invalid': errors['old-password']\n              })}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm='6'>\n          <FormGroup>\n            <InputPasswordToggle\n              label='New Password'\n              htmlFor='new-password'\n              name='new-password'\n              innerRef={register({ required: true })}\n              className={classnames('input-group-merge', {\n                'is-invalid': errors['new-password']\n              })}\n            />\n          </FormGroup>\n        </Col>\n        <Col sm='6'>\n          <FormGroup>\n            <InputPasswordToggle\n              label='Retype New Password'\n              htmlFor='retype-new-password'\n              name='retype-new-password'\n              innerRef={register({ required: true })}\n              className={classnames('input-group-merge', {\n                  'is-invalid': errors['retype-new-password']\n                })}\n                />\n          </FormGroup>\n        </Col>\n        <Col className='mt-1' sm='12'>\n          <Button.Ripple type='submit' className='mr-1' color='primary'>\n            Save changes\n          </Button.Ripple>\n        </Col>\n      </Row>\n    </Form>\n  )\n}\n\nexport default PasswordTabContent\n","import { Fragment, useState, useEffect } from 'react'\nimport Tabs from './Tab'\nimport axios from 'axios'\nimport GeneralTabContent from './Generaltab'\nimport PasswordTabContent from './Password'\nimport { Row, Col, TabContent, TabPane, Card, CardBody } from 'reactstrap'\n\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/react/pages/page-account-settings.scss'\n\nconst AccountSettings = () => {\n  const [activeTab, setActiveTab] = useState('1'),\n    [data, setData] = useState(null)\nconsole.log(\"hello\")\n  const toggleTab = tab => {\n    setActiveTab(tab)\n  }\n  console.log(\"pagination\")\n  useEffect(() => {\n    axios.get('/account-setting/data').then(response => setData(response.data))\n  }, [])\n\n  return (\n    <Fragment>\n      {data !== null ? (\n        <Row>\n          <Col className='mb-2 mb-md-0' md='3'>\n            <Tabs activeTab={activeTab} toggleTab={toggleTab} />\n          </Col>\n          <Col md='9'>\n            <Card>\n              <CardBody>\n                <TabContent activeTab={activeTab}>\n                  <TabPane tabId='1'>\n                    <GeneralTabContent data={data.general} />\n                  </TabPane>\n                  <TabPane tabId='2'>\n                    <PasswordTabContent />\n                  </TabPane>\n                </TabContent>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      ) : null}\n    </Fragment>\n  )\n}\n\nexport default AccountSettings\n"],"sourceRoot":""}