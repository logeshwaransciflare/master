{"version":3,"sources":["views/testingg/Test.js","@core/components/repeater/index.js"],"names":["AddQuestions","stepper","useForm","errors","register","handleSubmit","trigger","onSubmit","isObjEmpty","next","i","langOptions","value","label","control","useState","count","setCount","counts","className","md","for","isClearable","as","Select","id","name","rules","required","options","classnames","classNamePrefix","theme","selectThemeColors","type","placeholder","innerRef","sm","Ripple","color","onClick","outline","size","Repeater","props","tag","children","rest","Tag","items","push","defaultProps"],"mappings":"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","file":"static/js/230.d3648c04.chunk.js","sourcesContent":["import { Fragment, useState } from 'react'\r\nimport { isObjEmpty, selectThemeColors } from '@utils'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport Repeater from '@components/repeater'\r\nimport { CardBody, Input, Col, Label, Row, Button, Form, FormGroup} from 'reactstrap'\r\nimport { Plus, X  } from 'react-feather'\r\nimport classnames from 'classnames'\r\nimport Select from 'react-select'\r\n\r\nconst AddQuestions = ({ stepper }) => {\r\n  const { errors, register, handleSubmit, trigger } = useForm()\r\n\r\n  const onSubmit = () => {\r\n    trigger()\r\n    if (isObjEmpty(errors)) {\r\n      stepper.next()\r\n    }\r\n  }\r\n  const i = []\r\n  const langOptions = [\r\n    { value: '1', label: 'English' },\r\n    { value: '2', label: 'Arabic' }\r\n  ]\r\n\r\n  const {  control } = useForm({\r\n    // resolver: yupResolver(QuizDetailsSchema)\r\n  })\r\n\r\n  const [count, setCount] = useState(0)\r\n  const [counts] = useState(1)\r\n  const increaseCount = () => {\r\n    // if (count === 5) return\r\n    setCount(count + 1)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"content-header\">\r\n        <h5 className=\"mb-0\">Questions</h5>\r\n        <small>Enter Questions.</small>\r\n      </div>\r\n      <div>\r\n        <Form onSubmit={handleSubmit(onSubmit)}>\r\n              <Row>\r\n              <CardBody>\r\n            <Form key={i}>\r\n              <Row className='justify-content-between align-items-center'>\r\n                  <Col md={4}>\r\n                  <FormGroup >\r\n            <Label className=\"form-label\" for=\"quiz_lang\">\r\n              Quiz lang\r\n            </Label>\r\n            <Controller\r\n              isClearable\r\n              as={Select}\r\n              id=\"quiz_lang\"\r\n              control={control}\r\n              name=\"quiz_lang\"\r\n              rules={{ required: true }}\r\n              options={langOptions}\r\n              className={classnames('react-select', {\r\n                'is-invalid': errors['quiz_lang']\r\n              })}\r\n              classNamePrefix=\"select\"\r\n              theme={selectThemeColors}\r\n            />\r\n          </FormGroup>\r\n                  </Col>\r\n                <Col md={4}>\r\n                  <FormGroup>\r\n                    <Label className=\"form-label\" for={`question-${i}`}>Quiz Question</Label>\r\n                    <Input   type=\"text\"\r\n                    id={`question-${i}`}\r\n                    name={`question-${i}`}\r\n                    placeholder=\"Who is Lionel Messi?\"\r\n                    innerRef={register({ required: true })}\r\n                    className={classnames({\r\n                      'is-invalid': errors[`question-${i}`]\r\n                    })} />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={2}>\r\n                </Col>\r\n                <Col md={4}>\r\n                  <br/>\r\n                <div className=\"content-header\">\r\n        <h5 className=\"mb-0\">Answers</h5>\r\n        <small>Enter Answers.</small>\r\n      </div>\r\n      <br/>\r\n      <Col/>\r\n                  <FormGroup >\r\n            <Label className=\"form-label\" for=\"quiz_lang\">\r\n              Quiz lang\r\n            </Label>\r\n            <Controller\r\n              isClearable\r\n              as={Select}\r\n              id=\"quiz_lang\"\r\n              control={control}\r\n              name=\"quiz_lang\"\r\n              rules={{ required: true }}\r\n              options={langOptions}\r\n              className={classnames('react-select', {\r\n                'is-invalid': errors['quiz_lang']\r\n              })}\r\n              classNamePrefix=\"select\"\r\n              theme={selectThemeColors}\r\n            />\r\n          </FormGroup>\r\n                  </Col>\r\n                <Col md={4}>\r\n                  <br/>\r\n                  <br/>\r\n                  <br/>\r\n                  <br/>\r\n                  <FormGroup>\r\n                    <Label className=\"form-label\" for={`answer1-${i}`}>Quiz Answer 1</Label>\r\n                    <Input    type=\"text\"\r\n                    name={`answer1-${i}`}\r\n                    id={`answer1-${i}`}\r\n                    placeholder=\"Cricketer\"\r\n                    innerRef={register({ required: true })}\r\n                    className={classnames({\r\n                      'is-invalid': errors[`answer1-${i}`]\r\n                    })} />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={2}>\r\n                <br/>\r\n                  <br/>\r\n                  <br/>\r\n                  <br/>\r\n                </Col>\r\n                <Col md={4}>\r\n                  <FormGroup >\r\n            <Label className=\"form-label\" for=\"quiz_lang\">\r\n              Quiz lang\r\n            </Label>\r\n            <Controller\r\n              isClearable\r\n              as={Select}\r\n              id=\"quiz_lang\"\r\n              control={control}\r\n              name=\"quiz_lang\"\r\n              rules={{ required: true }}\r\n              options={langOptions}\r\n              className={classnames('react-select', {\r\n                'is-invalid': errors['quiz_lang']\r\n              })}\r\n              classNamePrefix=\"select\"\r\n              theme={selectThemeColors}\r\n            />\r\n          </FormGroup>\r\n                  </Col>\r\n                <Col md={4}>\r\n                  <FormGroup>\r\n                    <Label className=\"form-label\" for={`answer2-${i}`}>Quiz Answer 2</Label>\r\n                    <Input  type=\"text\"\r\n                    name={`answer2-${i}`}\r\n                    id={`answer2-${i}`}\r\n                    placeholder=\"Footballer\"\r\n                    innerRef={register({ required: true })}\r\n                    className={classnames({\r\n                      'is-invalid': errors[`answer2-${i}`]\r\n                    })}/>\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={2}>\r\n                </Col>\r\n                <Col md={4}>\r\n                  <FormGroup >\r\n            <Label className=\"form-label\" for=\"quiz_lang\">\r\n              Quiz lang\r\n            </Label>\r\n            <Controller\r\n              isClearable\r\n              as={Select}\r\n              id=\"quiz_lang\"\r\n              control={control}\r\n              name=\"quiz_lang\"\r\n              rules={{ required: true }}\r\n              options={langOptions}\r\n              className={classnames('react-select', {\r\n                'is-invalid': errors['quiz_lang']\r\n              })}\r\n              classNamePrefix=\"select\"\r\n              theme={selectThemeColors}\r\n            />\r\n          </FormGroup>\r\n                  </Col>\r\n                <Col md={4}>\r\n                  <FormGroup>\r\n                    <Label className=\"form-label\" for={`answer3-${i}`}>Quiz Answer 3</Label>\r\n                    <Input  type=\"text\"\r\n                    name={`answer3-${i}`}\r\n                    id={`answer3-${i}`}\r\n                    placeholder=\"VolleyBaller\"\r\n                    innerRef={register({ required: true })}\r\n                    className={classnames({\r\n                      'is-invalid': errors[`answer3-${i}`]\r\n                    })} />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={2}>\r\n                </Col>\r\n                <Col md={4}>\r\n                  <FormGroup >\r\n            <Label className=\"form-label\" for=\"quiz_lang\">\r\n              Quiz lang\r\n            </Label>\r\n            <Controller\r\n              isClearable\r\n              as={Select}\r\n              id=\"quiz_lang\"\r\n              control={control}\r\n              name=\"quiz_lang\"\r\n              rules={{ required: true }}\r\n              options={langOptions}\r\n              className={classnames('react-select', {\r\n                'is-invalid': errors['quiz_lang']\r\n              })}\r\n              classNamePrefix=\"select\"\r\n              theme={selectThemeColors}\r\n            />\r\n          </FormGroup>\r\n                  </Col>\r\n                <Col md={4}>\r\n                  <FormGroup>\r\n                    <Label className=\"form-label\" for={`answer4-${i}`}>Quiz Answer 4</Label>\r\n                    <Input type=\"text\"\r\n                    name={`answer4-${i}`}\r\n                    id={`answer4-${i}`}\r\n                    placeholder=\"BasketBaller\"\r\n                    innerRef={register({ required: true })}\r\n                    className={classnames({\r\n                      'is-invalid': errors[`answer4-${i}`]\r\n                    })} />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={2}>\r\n                </Col>\r\n                <Col sm={12}>\r\n                  <hr />\r\n                </Col>\r\n                \r\n              </Row>\r\n            </Form>\r\n      </CardBody>\r\n              </Row>\r\n      </Form>\r\n      </div>\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Repeater count={count}>\r\n          {(i) => (\r\n            <li key={i} className=\"list-unstyled\">\r\n              <Row>\r\n              <CardBody>\r\n        <Repeater count={counts}>\r\n          {i => (\r\n            <Form key={i}>\r\n              <Row className='justify-content-between align-items-center'>\r\n                  <Col md={4}>\r\n                  <FormGroup >\r\n            <Label className=\"form-label\" for=\"quiz_lang\">\r\n              Quiz lang\r\n            </Label>\r\n            <Controller\r\n              isClearable\r\n              as={Select}\r\n              id=\"quiz_lang\"\r\n              control={control}\r\n              name=\"quiz_lang\"\r\n              rules={{ required: true }}\r\n              options={langOptions}\r\n              className={classnames('react-select', {\r\n                'is-invalid': errors['quiz_lang']\r\n              })}\r\n              classNamePrefix=\"select\"\r\n              theme={selectThemeColors}\r\n            />\r\n          </FormGroup>\r\n                  </Col>\r\n                <Col md={4}>\r\n                  <FormGroup>\r\n                    <Label className=\"form-label\" for={`question-${i}`}>Quiz Question</Label>\r\n                    <Input   type=\"text\"\r\n                    id={`question-${i}`}\r\n                    name={`question-${i}`}\r\n                    placeholder=\"Who is Lionel Messi?\"\r\n                    innerRef={register({ required: true })}\r\n                    className={classnames({\r\n                      'is-invalid': errors[`question-${i}`]\r\n                    })} />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={2}>\r\n                  <Button.Ripple color='danger' className='text-nowrap px-1' onClick={() => {}} outline>\r\n                    <X size={14} className='mr-50' />\r\n                    <span>Delete</span>\r\n                  </Button.Ripple>\r\n                </Col>\r\n                <Col md={4}>\r\n                  <br/>\r\n                <div className=\"content-header\">\r\n        <h5 className=\"mb-0\">Answers</h5>\r\n        <small>Enter Answers.</small>\r\n      </div>\r\n      <br/>\r\n      <Col/>\r\n                  <FormGroup >\r\n            <Label className=\"form-label\" for=\"quiz_lang\">\r\n              Quiz lang\r\n            </Label>\r\n            <Controller\r\n              isClearable\r\n              as={Select}\r\n              id=\"quiz_lang\"\r\n              control={control}\r\n              name=\"quiz_lang\"\r\n              rules={{ required: true }}\r\n              options={langOptions}\r\n              className={classnames('react-select', {\r\n                'is-invalid': errors['quiz_lang']\r\n              })}\r\n              classNamePrefix=\"select\"\r\n              theme={selectThemeColors}\r\n            />\r\n          </FormGroup>\r\n                  </Col>\r\n                <Col md={4}>\r\n                  <br/>\r\n                  <br/>\r\n                  <br/>\r\n                  <br/>\r\n                  <FormGroup>\r\n                    <Label className=\"form-label\" for={`answer1-${i}`}>Quiz Answer 1</Label>\r\n                    <Input    type=\"text\"\r\n                    name={`answer1-${i}`}\r\n                    id={`answer1-${i}`}\r\n                    placeholder=\"Cricketer\"\r\n                    innerRef={register({ required: true })}\r\n                    className={classnames({\r\n                      'is-invalid': errors[`answer1-${i}`]\r\n                    })} />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={2}>\r\n                <br/>\r\n                  <br/>\r\n                  <br/>\r\n                  <br/>\r\n                  <Button.Ripple color='danger' className='text-nowrap px-1' onClick={() => {}} outline>\r\n                    <X size={14} className='mr-50' />\r\n                    <span>Delete</span>\r\n                  </Button.Ripple>\r\n                </Col>\r\n                <Col md={4}>\r\n                  <FormGroup >\r\n            <Label className=\"form-label\" for=\"quiz_lang\">\r\n              Quiz lang\r\n            </Label>\r\n            <Controller\r\n              isClearable\r\n              as={Select}\r\n              id=\"quiz_lang\"\r\n              control={control}\r\n              name=\"quiz_lang\"\r\n              rules={{ required: true }}\r\n              options={langOptions}\r\n              className={classnames('react-select', {\r\n                'is-invalid': errors['quiz_lang']\r\n              })}\r\n              classNamePrefix=\"select\"\r\n              theme={selectThemeColors}\r\n            />\r\n          </FormGroup>\r\n                  </Col>\r\n                <Col md={4}>\r\n                  <FormGroup>\r\n                    <Label className=\"form-label\" for={`answer2-${i}`}>Quiz Answer 2</Label>\r\n                    <Input  type=\"text\"\r\n                    name={`answer2-${i}`}\r\n                    id={`answer2-${i}`}\r\n                    placeholder=\"Footballer\"\r\n                    innerRef={register({ required: true })}\r\n                    className={classnames({\r\n                      'is-invalid': errors[`answer2-${i}`]\r\n                    })}/>\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={2}>\r\n                  <Button.Ripple color='danger' className='text-nowrap px-1' onClick={() => {}} outline>\r\n                    <X size={14} className='mr-50' />\r\n                    <span>Delete</span>\r\n                  </Button.Ripple>\r\n                </Col>\r\n                <Col md={4}>\r\n                  <FormGroup >\r\n            <Label className=\"form-label\" for=\"quiz_lang\">\r\n              Quiz lang\r\n            </Label>\r\n            <Controller\r\n              isClearable\r\n              as={Select}\r\n              id=\"quiz_lang\"\r\n              control={control}\r\n              name=\"quiz_lang\"\r\n              rules={{ required: true }}\r\n              options={langOptions}\r\n              className={classnames('react-select', {\r\n                'is-invalid': errors['quiz_lang']\r\n              })}\r\n              classNamePrefix=\"select\"\r\n              theme={selectThemeColors}\r\n            />\r\n          </FormGroup>\r\n                  </Col>\r\n                <Col md={4}>\r\n                  <FormGroup>\r\n                    <Label className=\"form-label\" for={`answer3-${i}`}>Quiz Answer 3</Label>\r\n                    <Input  type=\"text\"\r\n                    name={`answer3-${i}`}\r\n                    id={`answer3-${i}`}\r\n                    placeholder=\"VolleyBaller\"\r\n                    innerRef={register({ required: true })}\r\n                    className={classnames({\r\n                      'is-invalid': errors[`answer3-${i}`]\r\n                    })} />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={2}>\r\n                  <Button.Ripple color='danger' className='text-nowrap px-1' onClick={() => {}} outline>\r\n                    <X size={14} className='mr-50' />\r\n                    <span>Delete</span>\r\n                  </Button.Ripple>\r\n                </Col>\r\n                <Col md={4}>\r\n                  <FormGroup >\r\n            <Label className=\"form-label\" for=\"quiz_lang\">\r\n              Quiz lang\r\n            </Label>\r\n            <Controller\r\n              isClearable\r\n              as={Select}\r\n              id=\"quiz_lang\"\r\n              control={control}\r\n              name=\"quiz_lang\"\r\n              rules={{ required: true }}\r\n              options={langOptions}\r\n              className={classnames('react-select', {\r\n                'is-invalid': errors['quiz_lang']\r\n              })}\r\n              classNamePrefix=\"select\"\r\n              theme={selectThemeColors}\r\n            />\r\n          </FormGroup>\r\n                  </Col>\r\n                <Col md={4}>\r\n                  <FormGroup>\r\n                    <Label className=\"form-label\" for={`answer4-${i}`}>Quiz Answer 4</Label>\r\n                    <Input type=\"text\"\r\n                    name={`answer4-${i}`}\r\n                    id={`answer4-${i}`}\r\n                    placeholder=\"BasketBaller\"\r\n                    innerRef={register({ required: true })}\r\n                    className={classnames({\r\n                      'is-invalid': errors[`answer4-${i}`]\r\n                    })} />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col md={2}>\r\n                  <Button.Ripple color='danger' className='text-nowrap px-1' onClick={() => {}} outline>\r\n                    <X size={14} className='mr-50' />\r\n                    <span>Delete</span>\r\n                  </Button.Ripple>\r\n                </Col>\r\n                <Col sm={12}>\r\n                  <hr />\r\n                </Col>\r\n                \r\n              </Row>\r\n            </Form>\r\n          )}\r\n        </Repeater>\r\n      </CardBody>\r\n              </Row>\r\n            </li>\r\n          )}\r\n        </Repeater>\r\n        <div className=\"d-flex justify-content-between\">\r\n          {count <= 30 && (\r\n            <Button.Ripple\r\n              className=\"btn-icon\"\r\n              color=\"primary\"\r\n              onClick={increaseCount}\r\n            >\r\n              <Plus size={14} />\r\n              <span className=\"align-middle ml-25\">Add New Question</span>\r\n            </Button.Ripple>\r\n          )}\r\n        </div>\r\n      </Form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default AddQuestions\r\n\r\n\r\n// const param = {\r\n//   quiz_id: addedQuizID2,\r\n//   translation_quiz_questions: [\r\n//     {\r\n//       master_language_id: en,\r\n//       translation_quiz_question: document.getElementById(`question-${id}`).value\r\n//     }\r\n//   ],\r\n//   quiz_question_duration: '30',\r\n//   quiz_question_sno: id,\r\n//   quiz_question_answers: [\r\n//     {\r\n//       translation_quiz_answers:[\r\n//         {\r\n//           master_language_id:lang_id,\r\n//           translation_quiz_answer: document.getElementById(`answer1-${id}`).value,\r\n//         }\r\n//       ],\r\n//     quiz_answer_sno: '1',\r\n//    quiz_answer_correct:\r\n//    document.querySelector(`input[name=\"correct-answer-${id}\"]:checked`)\r\n//    .value === '1'\r\n//    ? 1\r\n//    :0\r\n//    },\r\n","// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Repeater = (props) => {\r\n  // ** Props\r\n  const { count, tag, children, ...rest } = props\r\n\r\n  // ** Custom Tag\r\n  const Tag = tag\r\n\r\n  // ** Default Items\r\n  const items = []\r\n\r\n  // ** Loop passed count times and push it in items Array\r\n  for (let i = 0; i < count; i++) {\r\n    items.push(children(i))\r\n  }\r\n\r\n  return <Tag {...rest}>{items}</Tag>\r\n}\r\n\r\n// ** PropTypes\r\nRepeater.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  tag: PropTypes.string.isRequired\r\n}\r\n\r\n// ** Default Props\r\nRepeater.defaultProps = {\r\n  tag: 'div'\r\n}\r\n\r\nexport default Repeater\r\n"],"sourceRoot":""}