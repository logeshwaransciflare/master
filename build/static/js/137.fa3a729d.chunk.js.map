{"version":3,"sources":["views/JerseyUpload/Fixture/cricket/list/Table.js","views/JerseyUpload/Fixture/cricket/list/index.js","configs/httpConfig.js","views/Toast.js","views/JerseyUpload/Fixture/store/actions/index.js"],"names":["SelectReact","useForm","defaultValues","reactSelect","handleSubmit","control","store","useSelector","state","corporatefixture","useState","val","setVal","img","setImg","imageError","teamName","setTeamName","teamsList","dispatch","useDispatch","useEffect","getAllCricketTeams","uppy","Uppy","meta","type","restrictions","maxNumberOfFiles","autoProceed","use","thumbnailGenerator","on","file","preview","teams","allTeams","map","ser","value","id","label","team_sn","Card","CardHeader","CardTitle","tag","isloading","CardBody","Row","Col","className","md","sm","Label","render","field","onChange","e","options","placeholder","theme","selectThemeColors","classnames","classNamePrefix","isClearable","name","locale","strings","dropHereOr","browse","src","alt","Button","Ripple","color","onClick","preventDefault","param","FormData","append","addfile","submit","UsersList","Table","token","localStorage","getItem","instance","axios","create","baseURL","headers","Authorization","interceptors","request","config","Successlogin","message","size","icon","Successadd","Successedit","Successdelete","ErrorToast","WarningToast","role","notifySuccesslogin","toast","success","hideProgressBar","notifySuccessadd","notifySuccessedit","notifySuccessdelete","notifyError","error","notifyWarning","warning","getAllSeries","a","http","get","then","response","data","console","log","records","getAllFixture","getplayerreport","seriesid","fixtureid","table","collectseriesid","collectfixtureid","getcricketplayerdownload","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","params","post","catch","getAllFootballTeams"],"mappings":"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","file":"static/js/137.fa3a729d.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport {useDispatch, useSelector} from \"react-redux\"\nimport Select from 'react-select'\nimport { selectThemeColors } from '@utils'\nimport { DragDrop } from '@uppy/react'\nimport Uppy from '@uppy/core'\nimport '@uppy/core/dist/style.css'\nimport classnames from 'classnames'\nimport { useForm, Controller } from 'react-hook-form'\nimport thumbnailGenerator from '@uppy/thumbnail-generator'\n// import \"./styles.scss\"\nimport './styles copy.scss'\nimport '@styles/react/libs/file-uploader/file-uploader.scss'\nimport { Card, CardHeader, CardTitle, CardBody, Row, Col, Label, Button} from 'reactstrap'\nimport {addfile, getAllCricketTeams} from \"../../store/actions\"\n// import Table from  \"./list/Table\"\nconst SelectReact = () => {\n  const defaultValues = {\n    reactSelect: null\n  }\n  const { handleSubmit, control } = useForm({ defaultValues })\n  \n    const store = useSelector((state) => state.corporatefixture)\n    const [val, setVal] = useState(false)\n    const [img, setImg] = useState(null)\n    const [imageError] = useState(false)\n    const [teamName, setTeamName] = useState(\"\")\n    const [teamsList] = useState([])\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n      dispatch(getAllCricketTeams())\n    }, [teamsList])\n\n    const uppy = new Uppy({\n      meta: { type: 'avatar' },\n      restrictions: { maxNumberOfFiles: 1 },\n      autoProceed: true\n    })\n  \n    uppy.use(thumbnailGenerator)\n  \n    uppy.on('thumbnail:generated', (file, preview) => {\n      setImg(preview)\n    })\n\n    const teams = store.allTeams.map((ser) => {\n      return { value: ser.id, label: ser.team_sn }\n    })   \n\n    const submit = (e) => {\n      setVal(true)\n      e.preventDefault()\n        const param = new FormData()\n        param.append('series_id', teamName.value)\n        param.append('file', img)\n        dispatch(addfile(param))    \n    }\n    \n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'>{store.isloading }</CardTitle> \n      </CardHeader>\n      <CardBody>\n        <Row>\n          <Col className='mb-1' md='6' sm='12'>\n            <Label>seriess</Label>\n            <Controller\n              control={control}\n              render={({ field: { ...field } }) => (\n                <Select\n                  {...field}\n                  onChange={(e) => setTeamName(e)}\n                  options={teams}\n                  placeholder='Select cricket series'\n                  theme={selectThemeColors}\n                  className={classnames('react-select', { 'is-invalid':  teamName === \"\" && val })}\n                  classNamePrefix='select'\n                  isClearable={true}\n                  />\n                  )}\n                  name='reactSelect'\n            />\n             {teamName === \"\" && val ?  <h5 className='text-danger'>Please enter a value</h5> : \"\"}\n          </Col>\n        </Row>\n        <Row className=\"wrapper-add\" >\n        <Col className=\"add-post-edit\">\n         <div className={`mt-4 ${imageError ? 'img-error-post' : ''}`}>\n         <DragDrop uppy={uppy}\n           locale={{\n            strings: {\n              dropHereOr: 'Drop file or %{browse}',\n              browse: 'browse'\n            }\n          }}\n         />\n       {img !== null ? <img className='rounded mt-2' src={img} alt='avatar' /> : null}\n              </div>\n              </Col>\n             </Row>\n             <div className=\"mt-3\">\n        <Button.Ripple \n        color='primary'\n        onClick={(e) => handleSubmit(submit(e))}\n        >submit</Button.Ripple>\n        </div>                  \n      </CardBody>\n    </Card>\n  )\n}\nexport default SelectReact","// ** User List Component\nimport Table from './Table'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst UsersList = () => {\n  return (\n    <div className='app-user-list'>\n      <Table />\n    </div>\n  )\n}\n\nexport default UsersList\n","import axios from 'axios'\n//import { Redirect } from 'react-router-dom'\nconst token = localStorage.getItem('TOKEN')\nconst instance = axios.create({\n  baseURL: 'https://fantasyapi.sciflaredev.com/admin/api',\n  headers: {\n    'Content-type': 'application/json',\n    Authorization: token\n  }\n})\ninstance.interceptors.request.use((config) => {\n  //const token = \"Bearer uchhE4e7lVxyFD68NdBxcylhSX108K5KkkGDLxWHluyMTYHd0CEWt9Th5c9OZ3XWlKO0hqtmQaTEYOgN4iXNfwZH7we462od18qD\"\n  const token = localStorage.getItem('TOKEN')\n  return {\n    ...config,\n    headers: {\n      'Content-type': 'application/json',\n      Authorization:\n        `${token}`\n    }\n  }\n})\n\nexport default instance ","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport { Bell, Check, X, AlertTriangle, Info } from 'react-feather'\nimport { Card, CardHeader, CardBody, CardTitle, Button } from 'reactstrap'\n\nconst PrimaryToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='primary' icon={<Bell size={12} />} />\n        <h6 className='toast-title'>Default!</h6>\n      </div>\n      <small className='text-muted'>12 Min Ago</small>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n      </span>\n    </div>\n  </Fragment>\n)\n\nconst Successlogin = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\n // const SuccessToast = () => (\n  //   <Fragment>\n  //     <div className='toastify-header'>\n  //       <div className='title-wrapper'>\n  //         <Avatar size='sm' color='success' icon={<Check size={12} />} />\n  //         <h6 className='toast-title'>Success!</h6>\n  //       </div>\n  //       <small className='text-muted'>11 Min Ago</small>\n  //     </div>\n  //     <div className='toastify-body'>\n  //       <span role='img' aria-label='toast-text'>\n  //         Successfully loged in\n  //       </span>\n  //     </div>\n  //   </Fragment>\n  // )\n\n\nconst Successadd = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst Successedit = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst Successdelete = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      {/* <span role='img' aria-label='toast-text'>\n        👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n      </span> */}\n    </div>\n  </Fragment>\n)\n\nconst ErrorToast = ({message}) => (\n  <Fragment>\n  <div className='toastify-header'>\n    <div className='title-wrapper'>\n      <Avatar size='sm' color='danger' icon={<X size={12} />} />\n      <h6 className='toast-title'>{message}</h6>\n    </div>\n  </div>\n  <div className='toastify-body'>\n    {/* <span role='img' aria-label='toast-text'>\n      👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n    </span> */}\n  </div>\n</Fragment>\n)\n\nconst WarningToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>Warning!</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        👋 Text Content Empty\n      </span>\n    </div>\n  </Fragment>\n)\n\nconst InfoToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>Info!</h6>\n      </div>\n      <small className='text-muted'>11 Min Ago</small>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n      </span>\n    </div>\n  </Fragment>\n)\n\nconst SuccessProgressToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Progress Bar!</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n       \n      </span>\n    </div>\n  </Fragment>\n)\n\nexport const notifySuccesslogin = (message) => toast.success(<Successlogin message={message} />, { hideProgressBar: true })\nexport const notifySuccessadd = (message) => toast.success(<Successadd message={message} />, { hideProgressBar: true })\nexport const notifySuccessedit = (message) => toast.success(<Successedit message={message} />, { hideProgressBar: true })\nexport const notifySuccessdelete = (message) => toast.success(<Successdelete message={message} />, { hideProgressBar: true })\nexport const notifyError = (message) => toast.error(<ErrorToast message={message}/>, { hideProgressBar: true })\nexport const notifyWarning = () => toast.warning(<WarningToast />, { hideProgressBar: true })\nexport const ToastTypes = () => {\n  const notifyDefault = () => toast(<PrimaryToast />, { hideProgressBar: true })\n  const notifyInfo = () => toast.info(<InfoToast />, { hideProgressBar: true })\n  const notifySuccessProgress = () => toast.success(<SuccessProgressToast />)\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'>Types</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <div className='demo-inline-spacing'>\n          <Button.Ripple color='primary' onClick={notifyDefault} outline>\n            Default\n          </Button.Ripple>\n          <Button.Ripple color='danger' onClick={notifyError} outline>\n            Error\n          </Button.Ripple>\n          <Button.Ripple color='warning' onClick={notifyWarning} outline>\n            Warning\n          </Button.Ripple>\n          <Button.Ripple color='info' onClick={notifyInfo} outline>\n            Info\n          </Button.Ripple>\n          <Button.Ripple color='success' onClick={notifySuccessProgress} outline>\n            Success Progress Bar\n          </Button.Ripple>\n        </div>\n      </CardBody>\n    </Card>\n  )\n}\n","import http from '../../../../../configs/httpConfig'\nimport {notifySuccessadd, notifyError} from \"../../../../Toast\"\nexport const getAllContests = () => {\n  return async (dispatch) => {\n    await http.get('/admin_contests/list').then((response) => {\n      dispatch({\n        type: 'GET_ALL_CONTESTS',\n        data: response.data.data\n      })\n    })\n  }\n}\n\nexport const getContestsListPDF = () => {\n  return async () => {\n    await http\n      .get('/admin_contests/export_pdf', { responseType: 'blob' })\n      .then((response) => {\n        const url = window.URL.createObjectURL(new Blob([response.data]))\n        const link = document.createElement('a')\n        link.href = url\n        link.setAttribute('download', `contests_${new Date().valueOf()}.pdf`) //or any other extension\n        document.body.appendChild(link)\n        link.click()\n      })\n  }\n}\n\nexport const getContestsListCSV = () => {\n  return async () => {\n    await http\n      .get('/admin_contests/export_csv', { responseType: 'blob' })\n      .then((response) => {\n        const url = window.URL.createObjectURL(new Blob([response.data]))\n        const link = document.createElement('a')\n        link.href = url\n        link.setAttribute('download', `contests_${new Date().valueOf()}.csv`) //or any other extension\n        document.body.appendChild(link)\n        link.click()\n      })\n  }\n}\n\n//football\n\nexport const getcricketdatainit = () => ({\n    type: 'GET_ALL_REPORTS_INIT'\n  })\n  \nexport const getcricketcontestdata = (page, from = '', to = \"\") => {\n    return async (dispatch) => {\n        dispatch(getcricketdatainit())\n        const url = (from && to) ? `/cricket/reports/contestReport?from=${from}&to=${to}&page=${page}` : `/cricket/reports/contestReport?page=${page}`\n        await http.get(url).then((response) => {\n        console.log(page, from, to)\n        console.log(response)\n        console.log(page)\n        dispatch({\n          type: 'GET_ALL_CONTEST_REPORTS',\n          data: response.data.data\n        })\n        console.log(response)\n      })\n    }\n  }\n\n  export const contestfrom = (from) => {\n    return (dispatch) => {\n      dispatch({\n        type:'CRIC_CONTEST_FROM',\n        data:from\n      })\n    }\n  }\n  \n  export const contestto = (to) => {\n    return (dispatch) => {\n      dispatch({\n        type:'CRIC_CONTEST_TO',\n        data:to\n      })\n    }\n  }\n\n  export const winnerfrom = (from) => {\n    return (dispatch) => {\n      dispatch({\n        type:'CRIC_WINNER_FROM',\n        data:from\n      })\n    }\n  }\n  \n  export const winnerto = (to) => {\n    return (dispatch) => {\n      dispatch({\n        type:'CRIC_WINNER_TO',\n        data:to\n      })\n    }\n  }\n\n  export const quizfrom = (from) => {\n    return (dispatch) => {\n      dispatch({\n        type:'CRIC_QUIZ_FROM',\n        data:from\n      })\n    }\n  }\n  \n  export const quizto = (to) => {\n    return (dispatch) => {\n      dispatch({\n        type:'CRIC_QUIZ_TO',\n        data:to\n      })\n    }\n  }\n\n  export const getcricketwinnerdata = (page, from = '', to = \"\") => {\n    return async (dispatch) => {\n        dispatch(getcricketdatainit())\n        const url = (from && to) ? `/cricket/reports/winnerReport?from=${from}&to=${to}&page=${page}` : `/cricket/reports/winnerReport?page=${page}`\n      await http.get(url).then((response) => {\n        console.log(response)\n        dispatch({\n          type: 'GET_ALL_WINNERS_REPORTS',\n          data: response.data.data\n        })\n      })\n    }\n  }\n\n  export const collectfrom = (from) => {\n    return (dispatch) => {\n      dispatch({\n        type:'COLLECT_FROM',\n        data:from\n      })\n    }\n  }\n  \n  export const collectto = (to) => {\n    return (dispatch) => {\n      dispatch({\n        type:'COLLECT_TO',\n        data:to\n      })\n    }\n  }\n\n  export const collectpage = (curentpage) => {\n    return (dispatch) => {\n      dispatch({\n        type:'COLLECT_PAGE',\n        data:curentpage\n      })\n    }\n  }\n  \n  export const getcricketquizdata = (page, from = '', to = \"\") => {\n    return async (dispatch) => {\n        dispatch(getcricketdatainit())\n        const url = (from && to) ? `/cricket/reports/quizReport?from=${from}&to=${to}&page=${page}` : `/cricket/reports/quizReport?page=${page}`\n      await http.get(url).then((response) => {\n        dispatch({\n          type: 'GET_ALL_QUIZ_REPORTS',\n          data: response.data.data\n        })\n      })\n    }\n  }\n\n  // export const getcricketcontestdownload = () => {\n  //   return async () => {\n  //     await http.get(`/cricket/reports/contestReport?download=true`).then((response) => {\n  //       console.log(response)\n  //     })\n  //   }\n  // }\n\n  export const getcricketcontestdownload = () => {\n    return async () => {\n      await http\n        .get('/cricket/reports/contestReport?download=true', { responseType: 'blob' })\n        .then((response) => {\n          const url = window.URL.createObjectURL(new Blob([response.data]))\n          const link = document.createElement('a')\n          link.href = url\n          link.setAttribute('download', 'file.csv') //or any other extension\n          document.body.appendChild(link)\n          link.click()\n        })\n    }\n  }\n\n  export const getcricketwinnerdownload = () => {\n    return async () => {\n      await http\n        .get('/cricket/reports/winnerReport?download=true', { responseType: 'blob' })\n        .then((response) => {\n          const url = window.URL.createObjectURL(new Blob([response.data]))\n          const link = document.createElement('a')\n          link.href = url\n          link.setAttribute('download', 'winnerReport.csv') //or any other extension\n          document.body.appendChild(link)\n          link.click()\n        })\n    }\n  }\n\n  export const getcricketquizdownload = () => {\n    return async () => {\n      await http\n        .get('/cricket/reports/quizReport?download=true', { responseType: 'blob' })\n        .then((response) => {\n          const url = window.URL.createObjectURL(new Blob([response.data]))\n          const link = document.createElement('a')\n          link.href = url\n          link.setAttribute('download', 'file.csv') //or any other extension\n          document.body.appendChild(link)\n          link.click()\n        })\n    }\n  }\n\n  // export const getcricketwinnerdownload = () => {\n  //   return async () => {\n  //     await http.get(`/football/reports/winnerReport?download=true`).then((response) => {\n  //       console.log(response)\n  //     })\n  //   }\n  // }\n\n  // export const getcricketquizdownload = () => {\n  //   return async () => {\n  //     await http.get(`/football/reports/quizReport?download=true`).then((response) => {\n  //       console.log(response)\n  //     })\n  //   }\n  // }\n\n  export const getAllSeries = () => {\n    return async (dispatch) => {\n      dispatch(getcricketdatainit())\n      await http.get('/cricket/series/list').then((response) => {\n        dispatch({\n          type: 'SERIES_NAME',\n          data: response.data.data\n        })\n        console.log(response.data.data.records, \"this\")\n      })\n    }\n  }\n\n  export const getAllFixture = (id) => {\n    return async (dispatch) => {\n      console.log(id)\n      dispatch(getcricketdatainit())\n      await http.get(`/cricket/fixture/list/${id}`).then((response) => {\n        dispatch({\n          type: 'FIXTURE_NAME',\n          data: response.data.data\n        })\n        console.log(response.data.data)\n      })\n    }\n  }\n\n  export const getplayerreport = (seriesid, fixtureid) => {\n    return async (dispatch) => {\n      dispatch(getcricketdatainit())\n      await http.get(`/cricket/reports/playerReport?series_id=${seriesid}&fixture_id=${fixtureid}`).then((response) => {\n        dispatch({\n          type: 'PLAYER_REPORT',\n          data: response.data.data\n        })\n        console.table(response.data.data)\n      })\n    }\n  }\n\n  export const collectseriesid = (seriesid) => {\n   \n    console.log(seriesid)\n    return (dispatch) => {\n      dispatch({\n        type:'COLLECT_SERIESID',\n        data:seriesid\n      })\n    }\n  }\n  \n  export const collectfixtureid = (fixtureid) => {\n      console.log(fixtureid)\n    return (dispatch) => {\n      dispatch({\n        type:'COLLECT_FIXTUREID',\n        data:fixtureid\n      })\n    }\n  }\n\n//cricket/reports/playerReport?series_id=1&fixture_id=730&download=true\n  export const getcricketplayerdownload = (seriesid, fixtureid) => {\n    return async () => {\n            await http\n        .get(`/cricket/reports/playerReport?series_id=${seriesid}&fixture_id=${fixtureid}&download=true`, { responseType: 'blob' })\n        .then((response) => {\n          const url = window.URL.createObjectURL(new Blob([response.data]))\n          const link = document.createElement('a')\n          link.href = url\n          link.setAttribute('download', 'cricketplayerreport.csv') //or any other extension\n          document.body.appendChild(link)\n          link.click()\n        })\n    }\n  }\n\n  export const getCricketContestadd = (id) => {\n    return (dispatch) => {\n      http\n        .post('/cricket/contest_prizes/list', id)\n        .then((response) => {\n          dispatch({\n            type: 'CRICKET_CONTEST_PRIZE_ADD',\n            data: response.data.data\n          })\n          console.log(response)\n        })\n        .catch((err) => {\n          console.log(err)\n        })\n    }\n  }\n\n  export const addfile = (params) => {\n    return async (dispatch) => {\n      // dispatch(addPostInit())\n      await http.post('/fixtureUpload', params).then((response) => {\n        notifySuccessadd(response.data.message)\n        dispatch({\n          type: 'ADD_FILE',\n          data: response.data.message\n        })\n      }).catch((e) => {\n        notifyError(e.response.data.message)\n        // dispatch(addPostFail())\n      })\n    }\n  }\n  \n  export const getAllCricketTeams = () => {\n    return (dispatch) => {\n      http.get('cricket/team/list')\n      .then((response) => dispatch({type:'GET_CRICKET_TEAMS', data:response.data.data.data}))\n      .catch((e) => console.log(e))\n    }\n  }\n\n  export const getAllFootballTeams = () => {\n    return (dispatch) => {\n      http.get('football/team/list')\n      .then((response) => dispatch({type:'GET_FOOTBALL_TEAMS', data:response.data.data.data}))\n      .catch((e) => console.log(e))\n    }\n  }\n"],"sourceRoot":""}