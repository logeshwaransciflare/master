{"version":3,"sources":["views/WallPost/edit/index.js","configs/httpConfig.js","views/Toast.js","@core/components/breadcrumbs/index.js","@core/components/ui-loader/index.js","views/WallPost/store/action/index.js"],"names":["WallPostEdit","history","useHistory","dispatch","useDispatch","store","useSelector","state","feeds","useForm","register","errors","handleSubmit","reset","useState","imageUpload","setImageUpload","EditorState","createWithContent","ContentState","createFromBlockArray","convertFromHTML","editPostData","feed_content","editorState","setEditorState","convertedContent","setConvertedContent","createMarkup","html","__html","DOMPurify","sanitize","arabic_feed_content","editor","setEditor","converted","setConverted","useEffect","Object","keys","feed_image","replace","JSON","stringify","console","log","editSuccessData","uppy","Uppy","meta","type","autoProceed","restrictions","maxNumberOfFiles","allowedFileTypes","on","file","reader","FileReader","readAsDataURL","data","onloadend","base64data","result","dangerouslySetInnerHTML","feedtext","length","dangerously","text","formSubmit","params","feed_type","base64","img","url","canvas","document","createElement","width","height","getUrl","split","toDataURL","getBase64Image","getElementById","editFeedPost","feed_id","breadCrumbTitle","breadCrumbParent","breadCrumbActive","tag","className","onSubmit","e","preventDefault","editPostLoader","for","name","id","onEditorStateChange","currentContentAsHTML","convertToHTML","getCurrentContent","convertContentToHTML","wrapperClassName","editorClassName","toolbarClassName","innerRef","required","classnames","convertContentHTML","locale","strings","dropHereOr","browse","src","Ripple","color","disabled","blocking","token","localStorage","getItem","instance","axios","create","baseURL","headers","Authorization","interceptors","request","use","config","Successlogin","message","size","icon","Successadd","Successedit","Successdelete","ErrorToast","WarningToast","role","notifySuccesslogin","toast","success","hideProgressBar","notifySuccessadd","notifySuccessedit","notifySuccessdelete","notifyError","error","notifyWarning","warning","BreadCrumbs","props","breadCrumbParent2","breadCrumbParent3","to","active","UILoader","children","loader","overlayColor","Tag","style","backgroundColor","defaultProps","getAllWallData","page","http","get","then","response","catch","deleteFeedPost","delete","addFeedPost","post","addPostReset","put","Feedtogglestatus"],"mappings":"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","file":"static/js/94.88512822.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport { useForm } from 'react-hook-form'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Card, CardHeader, CardTitle, CardBody, Row, Col, Button, FormGroup, Form, Label} from 'reactstrap'\nimport Uppy from '@uppy/core'\n//import classnames from 'classnames'\nimport { EditorState, ContentState, convertFromHTML } from 'draft-js'\nimport { Editor } from 'react-draft-wysiwyg'\nimport { convertToHTML } from 'draft-convert'\nimport classnames from 'classnames'\nimport DOMPurify from 'dompurify'\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\nimport '@styles/react/libs/editor/editor.scss'\nimport { DragDrop } from '@uppy/react'\nimport UiLoader from '@components/ui-loader'\nimport { useHistory } from 'react-router-dom'\nimport { editFeedPost } from '../store/action'\nimport '@uppy/core/dist/style.css'\nimport '@styles/react/libs/file-uploader/file-uploader.scss'\nimport './styles.scss'\nimport Breadcrumbs from '@components/breadcrumbs'\n// import { notifyWarning } from '../../Toast'\n\n// import Flatpickr from 'react-flatpickr'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\n\n\nconst WallPostEdit = () => {\n  const history = useHistory()\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.feeds)\n  const {register, errors, handleSubmit, reset } = useForm() //register, errors,\n  const [imageUpload, setImageUpload] = useState('')\n  \n  \n  //const [content, setContent] = useState(\"\")\nconst [editorState, setEditorState] = useState(() => EditorState.createWithContent(ContentState.createFromBlockArray(convertFromHTML(store?.editPostData?.feed_content)\n  \n))\n    \n\n  )\n  const  [convertedContent, setConvertedContent] = useState(null)\n  const convertContentToHTML = () => {\n    const currentContentAsHTML = convertToHTML(editorState.getCurrentContent())\n    setConvertedContent(currentContentAsHTML)\n  }\n  const createMarkup = (html) => {\n    return  {\n      __html: DOMPurify.sanitize(html)\n    }\n    \n  }\n\n  const handleEditorChange = (state) => {\n    setEditorState(state)\n    convertContentToHTML()\n  }\n\n// Arabic Editor\n\nconst [editor, setEditor] = useState(() => EditorState.createWithContent(ContentState.createFromBlockArray(convertFromHTML(store?.editPostData?.arabic_feed_content ? store?.editPostData?.arabic_feed_content : ''))\n  \n))\nconst  [converted, setConverted] = useState(null)\n\nconst convertContentHTML = () => {\n  const currentContentAsHTML = convertToHTML(editor.getCurrentContent())\n  setConverted(currentContentAsHTML)\n}\n\nconst handleEditor = (state) => {\n  setEditor(state)\n  convertContentHTML()\n}\n\n\n  useEffect(() => {\n    \n    if (!Object.keys(store.editPostData)) {\n     \n      history.replace('/walls')\n    } else {\n      \n     //setValue('post_content', store.editPostData.feed_content)      \n      //setContent('post_content', contentBlock)\n      setImageUpload(store.editPostData.feed_image)\n      \n      \n    }\n  }, [JSON.stringify(store.editPostData)])    \nconsole.log(store)\n  useEffect(() => {    \n  \n    if (store.editSuccessData) { \n      reset()\n      setEditorState('')\n      setImageUpload('')\n      \n    }\n  }, [store.editSuccessData])\n  \n  const uppy = new Uppy({\n    meta: { type: 'avatar' },\n    autoProceed: true,\n    restrictions: { maxNumberOfFiles: 1, allowedFileTypes: ['image/*'] }\n  })\n\n  uppy.on(\"file-added\", function (file) {\n    const reader = new FileReader()\n    reader.readAsDataURL(file.data)\n    reader.onloadend = function () {\n      const base64data = reader.result\n      setImageUpload(base64data)\n    }\n  })\n  const dangerouslySetInnerHTML = createMarkup(convertedContent).__html\n  const feedtext = (dangerouslySetInnerHTML.length < 20 ? null : dangerouslySetInnerHTML)\n\n  const dangerously = createMarkup(converted).__html\n  const text = (dangerously.length < 20 ? null : dangerously)\n  const formSubmit = () => {\n    if (imageUpload) {\n      const params = {\n        feed_type: \"Post\",\n        feed_content:feedtext,\n        arabic_feed_content:text,\n        feed_image: imageUpload\n      }      \n\n      const getBase64Image = (img, url) => {\n        const canvas = document.createElement(\"canvas\")\n        canvas.width = img.width\n        canvas.height = img.height\n        //const ctx = canvas.getContext(\"2d\")\n        //ctx.drawImage(img, 0, 0)\n        const getUrl = url.split('.')\n        const dataURL = canvas.toDataURL(`image/${getUrl[getUrl.length - 1]}`)\n        return dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\")\n      }\n      // console.log(\"Elemnt : \", document.getElementById(\"post-img-prev-id\"))\n      const base64 = getBase64Image(document.getElementById(\"post-img-prev-id\"), store.editPostData.feed_image)\n      console.log(\"Base 64 : \",  base64)   \n      \n        dispatch(editFeedPost(store.editPostData.feed_id, params))\n       \n    }\n  }\n\n  const formHandler = (e) => {\n    e.preventDefault()\n    if (store.editPostLoader) {\n      return\n    }\n\n    // if (!imageUpload) {\n    //   setImageError(true)\n    // } else {\n    //   setImageError(false)\n    // }\n\n    handleSubmit(formSubmit)()\n   \n    \n  }\n  // if ((params.feed_content === null || params.feed_image === '')) {\n  //   notifyWarning()\n  // } else {\n  //   dispatch(\n  //     editFeedPost(store.editPostData.feed_id, params))\n  // }   \n  // const [picker, setPicker] = useState(new Date())\n\n  return (\n    <>\n          <Breadcrumbs breadCrumbTitle='Walls' breadCrumbParent='Walls' breadCrumbActive='Edit' />\n    <Card>\n      <CardHeader>\n        <CardTitle tag=\"h4\">Edit Post</CardTitle>        \n      </CardHeader>\n      <CardBody>\n        <Row className=\"wrapper-add-post\">\n          <Col className=\"add-post-edit\">\n            <Form onSubmit={formHandler}>\n              <div className=\"form-label-group add-feed-textarea\">\n                <FormGroup>\n                  <Label className=\"form-label\" for=\"post_content\">\n                    <h4>Post Content English</h4>\n                  </Label>\n                  \n                     <Editor \n                        name=\"post_content\"\n                        id=\"post_content\"\n                        editorState={editorState}\n                        onEditorStateChange={handleEditorChange}\n                        wrapperClassName=\"wrapper-class\"\n                        editorClassName=\"editor-class\"\n                        toolbarClassName=\"toolbar-class\"\n                        innerRef={register({ required: true })}\n                        className={classnames({\n                          'is-invalid': errors['editorState']\n                        })}\n                      //wrapperStyle={{ width: 800, border: \"1px solid black\" }}\n                   />\n                </FormGroup>\n               \n               \n              </div>\n\n              <div className=\"form-label-group add-feed-textarea\">\n                <FormGroup>\n                  <Label className=\"form-label\" for=\"post_content\">\n                  <h3>Post Content Arabic</h3>\n                  </Label>\n                  \n                     <Editor \n                        name=\"post_content\"\n                        id=\"post_content\"\n                        editorState={editor}\n                        onEditorStateChange={handleEditor}\n                        wrapperClassName=\"wrapper-class\"\n                        editorClassName=\"editor-class\"\n                        toolbarClassName=\"toolbar-class\"\n                        innerRef={register({ required: true })}\n                        className={classnames({\n                          'is-invalid': errors['editorState']\n                        })}\n                      //wrapperStyle={{ width: 800, border: \"1px solid black\" }}\n                   />\n                </FormGroup>\n               \n               \n              </div>\n             \n                <DragDrop\n                  uppy={uppy}\n                  locale={{\n                    strings: {\n                      // Text to show on the droppable area.\n                      // `%{browse}` is replaced with a link that opens the system file selection dialog.\n                      dropHereOr: 'Drop Image or %{browse}',\n                      // Used as the label for the link that opens the system file selection dialog.\n                      browse: 'browse'\n                    }\n                  }}\n                />\n                {imageUpload && (\n                  <div className=\"uploaded-files\">\n                    <img src={imageUpload} className=\"post-preview\" id=\"post-img-prev-id\" />\n                  </div>\n                )}\n                          \n              <FormGroup className=\"mt-3\">\n                <div className=\"d-flex justify-content-start\">\n                  <Button.Ripple\n                    type=\"submit\"\n                    color=\"primary\"\n                    disabled={store.editPostLoader}\n                    className=\"btn-next\"                    \n                  >\n                    <span className=\"align-middle d-sm-inline-block d-none\">\n                      Edit Post\n                    </span>\n                  </Button.Ripple>\n                  {store.editPostLoader && (\n                    <div className=\"ml-2 mt-2\">\n                      <UiLoader\n                        blocking\n                      />\n                    </div>\n                  )}\n                  \n                </div>\n              </FormGroup>\n            </Form>\n          </Col>\n        </Row>\n      </CardBody>\n    </Card>\n    </>\n  )\n}\n\nexport default WallPostEdit","import axios from 'axios'\n//import { Redirect } from 'react-router-dom'\nconst token = localStorage.getItem('TOKEN')\nconst instance = axios.create({\n  baseURL: 'https://fantasyapi.sciflaredev.com/admin/api',\n  headers: {\n    'Content-type': 'application/json',\n    Authorization: token\n  }\n})\ninstance.interceptors.request.use((config) => {\n  //const token = \"Bearer uchhE4e7lVxyFD68NdBxcylhSX108K5KkkGDLxWHluyMTYHd0CEWt9Th5c9OZ3XWlKO0hqtmQaTEYOgN4iXNfwZH7we462od18qD\"\n  const token = localStorage.getItem('TOKEN')\n  return {\n    ...config,\n    headers: {\n      'Content-type': 'application/json',\n      Authorization:\n        `${token}`\n    }\n  }\n})\n\nexport default instance ","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport { Bell, Check, X, AlertTriangle, Info } from 'react-feather'\nimport { Card, CardHeader, CardBody, CardTitle, Button } from 'reactstrap'\n\nconst PrimaryToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='primary' icon={<Bell size={12} />} />\n        <h6 className='toast-title'>Default!</h6>\n      </div>\n      <small className='text-muted'>12 Min Ago</small>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n      </span>\n    </div>\n  </Fragment>\n)\n\nconst Successlogin = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\n // const SuccessToast = () => (\n  //   <Fragment>\n  //     <div className='toastify-header'>\n  //       <div className='title-wrapper'>\n  //         <Avatar size='sm' color='success' icon={<Check size={12} />} />\n  //         <h6 className='toast-title'>Success!</h6>\n  //       </div>\n  //       <small className='text-muted'>11 Min Ago</small>\n  //     </div>\n  //     <div className='toastify-body'>\n  //       <span role='img' aria-label='toast-text'>\n  //         Successfully loged in\n  //       </span>\n  //     </div>\n  //   </Fragment>\n  // )\n\n\nconst Successadd = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst Successedit = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n  </Fragment>\n)\n\nconst Successdelete = ({message}) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>{message}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      {/* <span role='img' aria-label='toast-text'>\n        👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n      </span> */}\n    </div>\n  </Fragment>\n)\n\nconst ErrorToast = ({message}) => (\n  <Fragment>\n  <div className='toastify-header'>\n    <div className='title-wrapper'>\n      <Avatar size='sm' color='danger' icon={<X size={12} />} />\n      <h6 className='toast-title'>{message}</h6>\n    </div>\n  </div>\n  <div className='toastify-body'>\n    {/* <span role='img' aria-label='toast-text'>\n      👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n    </span> */}\n  </div>\n</Fragment>\n)\n\nconst WarningToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>Warning!</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        👋 Text Content Empty\n      </span>\n    </div>\n  </Fragment>\n)\n\nconst InfoToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>Info!</h6>\n      </div>\n      <small className='text-muted'>11 Min Ago</small>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        👋 Jelly-o macaroon brownie tart ice cream croissant jelly-o apple pie.\n      </span>\n    </div>\n  </Fragment>\n)\n\nconst SuccessProgressToast = () => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Progress Bar!</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n       \n      </span>\n    </div>\n  </Fragment>\n)\n\nexport const notifySuccesslogin = (message) => toast.success(<Successlogin message={message} />, { hideProgressBar: true })\nexport const notifySuccessadd = (message) => toast.success(<Successadd message={message} />, { hideProgressBar: true })\nexport const notifySuccessedit = (message) => toast.success(<Successedit message={message} />, { hideProgressBar: true })\nexport const notifySuccessdelete = (message) => toast.success(<Successdelete message={message} />, { hideProgressBar: true })\nexport const notifyError = (message) => toast.error(<ErrorToast message={message}/>, { hideProgressBar: true })\nexport const notifyWarning = () => toast.warning(<WarningToast />, { hideProgressBar: true })\nexport const ToastTypes = () => {\n  const notifyDefault = () => toast(<PrimaryToast />, { hideProgressBar: true })\n  const notifyInfo = () => toast.info(<InfoToast />, { hideProgressBar: true })\n  const notifySuccessProgress = () => toast.success(<SuccessProgressToast />)\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle tag='h4'>Types</CardTitle>\n      </CardHeader>\n      <CardBody>\n        <div className='demo-inline-spacing'>\n          <Button.Ripple color='primary' onClick={notifyDefault} outline>\n            Default\n          </Button.Ripple>\n          <Button.Ripple color='danger' onClick={notifyError} outline>\n            Error\n          </Button.Ripple>\n          <Button.Ripple color='warning' onClick={notifyWarning} outline>\n            Warning\n          </Button.Ripple>\n          <Button.Ripple color='info' onClick={notifyInfo} outline>\n            Info\n          </Button.Ripple>\n          <Button.Ripple color='success' onClick={notifySuccessProgress} outline>\n            Success Progress Bar\n          </Button.Ripple>\n        </div>\n      </CardBody>\n    </Card>\n  )\n}\n","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\n//import { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem\r\n  //UncontrolledButtonDropdown,\r\n  //DropdownMenu,\r\n  //DropdownItem,\r\n  //DropdownToggle\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent ? (\r\n                <BreadcrumbItem tag='li' className='text-primary'>\r\n                  <Link to={`/${breadCrumbParent}`}>{breadCrumbParent}</Link>\r\n                </BreadcrumbItem>\r\n                ) : ''\r\n                }\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>\r\n        <div className='form-group breadcrum-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' right>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <CheckSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Todo</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <MessageSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Chat</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/email'>\r\n                <Mail className='mr-1' size={14} />\r\n                <span className='align-middle'>Email</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/calendar'>\r\n                <Calendar className='mr-1' size={14} />\r\n                <span className='align-middle'>Calendar</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string.isRequired\r\n}\r\n","// ** Third Party Components\r\nimport { Fragment } from 'react'\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Spinner } from 'reactstrap'\r\n\r\nimport './ui-loader.scss'\r\n\r\nconst UILoader = props => {\r\n  const { children, blocking, loader, className, tag, overlayColor } = props\r\n\r\n  const Tag = tag\r\n\r\n  return (\r\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\r\n      {children}\r\n      {blocking ? (\r\n        <Fragment>\r\n          <div\r\n            className='overlay' /*eslint-disable */\r\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\r\n            /*eslint-enable */\r\n          ></div>\r\n          <div className='loader'>{loader}</div>\r\n        </Fragment>\r\n      ) : null}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default UILoader\r\n\r\nUILoader.defaultProps = {\r\n  tag: 'div',\r\n  blocking: false,\r\n  loader: <Spinner color='primary' />\r\n}\r\n\r\nUILoader.propTypes = {\r\n  tag: Proptypes.string,\r\n  loader: Proptypes.any,\r\n  className: Proptypes.string,\r\n  overlayColor: Proptypes.string,\r\n  blocking: Proptypes.bool.isRequired\r\n}\r\n","import http from '../../../../configs/httpConfig'\nimport {notifyError, notifySuccessadd, notifySuccessedit} from \"../../../Toast\"\n\n//Get all Data Init\nexport const getAllWallDataInit = () => ({\n  type: 'GET_ALL_WALL_DATA_INIT'\n})\n\n// Get all Data Fail\nexport const getAllWallDataFail = () => ({\n  type: 'GET_ALL_WALL_DATA_FAIL'\n})\n//const url = (from && to) ? `/reports/referralReport?from=${from}&to=${to}&page=${page}` : `/reports/referralReport?page=${page}`\n// ** Get all Data\nexport const getAllWallData = (page) => {\n  \n  return async (dispatch) => {\n    dispatch(getAllWallDataInit())\n    await http.get(`/feeds/list?page=${page}`).then((response) => {\n      console.log(response)\n      dispatch({\n        type: 'GET_ALL_WALL_POST',\n        data: response.data.data\n      })\n    }).catch(() => {\n     // console.log(e)\n      dispatch(getAllWallDataFail())\n    })\n  } \n}\n\nexport const Delete = () => {\n  return (dispatch) => {\n    dispatch({\n      type:'WALL_DELETE'\n    })\n  } \n}\n\nexport const deleteFeedPost = (id) => {\n  return async (dispatch) => {\n    await http.delete(`/feeds/delete/${id}`).then(() => {\n      notifyError('successfully deleted')\n      dispatch(getAllWallData())      \n    }).catch((e) => {     \n      notifyError('error')\n      dispatch(Delete())\n      console.log(e)\n    })\n  }\n}\n\nexport const UserFeed = (id) => {  \n  return async (dispatch) => {\n    dispatch(getAllWallDataInit())\n    await http.get(`/feeds/comment?user=${id}`).then((response) => {\n      console.log(response)\n      dispatch({\n        type: 'GET_ALL_WALL_COMMENNT',\n        data: response.data.data\n      })\n    }).catch(() => {\n      dispatch(getAllWallDataFail())\n    })\n  } \n}\n\nexport const addPostInit = () => ({\n  type: 'ADD_FEED_POST_INIT'\n})\n\nexport const addPostFail = () => ({\n  type: 'ADD_FEED_POST_FAIL'\n})\n\nexport const addFeedPost = (params) => {\n \n  return async (dispatch) => {\n    dispatch(addPostInit())\n   if (params.feed_content === null) {\n  \n    notifyError(\"Eror\")\n   } else {\n    await http.post('/feeds/add', params).then((response) => {\n      notifySuccessadd(response.data.message)\n      dispatch({\n        type: 'ADD_FEED_POST',\n        data: response.data.message\n      })\n      \n    }).catch((e) => {\n      \n      notifyError(e.response.data.message)\n      console.log(\"Error in Feed Post: \", e)\n      dispatch(addPostFail())\n    })\n  }\n}\n   }\n    \n\nexport const addPostReset = () => ({\n  type: 'RESET_ADD_POST'\n})\n\n\nexport const editPostReset = () => ({\n  type: 'RESET_EDIT_POST'\n})\n\nexport const editPostData = (params) => ({\n  type: 'EDIT_POST_DATA',\n  data: params\n})\n\nexport const editPostInit = () => ({\n  type: 'EDIT_POST_INIT'\n})\n\nexport const editPostFail = () => ({\n  type: 'EDIT_POST_FAIL'\n})\n\n\nexport const editFeedPost = (id, params) => {\n  return async (dispatch) => {\n    dispatch(editPostInit())\n    await http.put(`/feeds/edit/${id}`, params).then((response) => {\n      console.log(response)\n      notifySuccessedit(response.data.message)\n      //console.log(response.data.message)\n      console.log(\"Respont : \", response)\n      dispatch({\n        type: 'EDIT_FEED_POST',\n        data: response.data.message\n      })\n    }).catch((e) => {\n      console.log(e)\n      notifyError(e.data.message)\n      console.log(\"Error in Feed Post: \", e)\n      dispatch(editPostFail())\n    })\n  }\n}\n\nexport const wallview = (id) => {\n  return async (dispatch) => {\n    await http.put(`/feeds/view/${id}`).then((response) => {\n      console.log(\"Respont : \", response)\n      dispatch({\n        type: 'GET_WALL_VIEW',\n        data: response.data.message\n      })\n    }).catch((e) => {\n      console.log(\"Error in Feed Post: \", e)\n      dispatch(editPostFail())\n    })\n  }\n}\nexport const Feedtogglestatus = (id) => {\n  return async (dispatch) => {    \n    await http.post(`feeds/toggle_status/${id}`).then((response) => {\n      notifySuccessadd('successfully updated')      \n     console.log(response)\n       dispatch({\n        type: 'FEED_TOGGLE_STATUS',\n        data: response\n      })  \n       dispatch(getAllWallData())        \n    }).catch((e) => {\n      notifyError('error')\n      console.log(e)\n      console.log(\"Error in Feed Post: \", e)\n      \n    })\n  }\n}"],"sourceRoot":""}